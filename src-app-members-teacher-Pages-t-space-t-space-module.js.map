{"version":3,"sources":["./src/app/members/teacher/Pages/t-space/t-space.page.ts","./src/app/members/teacher/Components/blck-dual-t/blck-dual-t.component.html","./src/app/members/teacher/Components/blck-dual-t/blockeado-t-dual .js","./src/app/members/teacher/Pages/t-space/t-space-routing.module.ts","./src/app/members/teacher/Components/blck-t /blck-t.component.ts","./src/app/members/teacher/Components/blck-t /blockeado-t.js","./src/app/members/teacher/Pages/t-space/t-space.page.html","./src/app/members/teacher/Components/blck-dual-t/blck-dual-t.component.scss","./src/app/members/teacher/Components/blck-dual-t/blck-dual-t.component.ts","./src/app/members/teacher/Pages/t-space/t-space.module.ts","./src/app/members/teacher/Pages/t-space/t-space.page.scss","./src/app/members/teacher/Components/blck-t /blck-t.component.html","./src/app/members/teacher/Services/t-map.service.ts","./src/app/members/teacher/Components/blck-t /blck-t.component.scss"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAkD;AACgB;IAOrD,UAAU,SAAV,UAAU;IAGrB,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAF3C,kBAAa,GAAG,IAAI,CAAC;QACrB,gBAAW,GAAG,KAAK,CAAC;IAC2B,CAAC;IAEvD,QAAQ;QACN,IAAI,CAAC,cAAc;QACnB,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACnC,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QACxC,YAAY,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAC1C,YAAY,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;QAC/C,YAAY,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QAC3C,YAAY,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;IAClD,CAAC;IACK,eAAe;;YACnB,IAAI,CAAC,WAAW,GAAE,CAAC,IAAI,CAAC,WAAW,CAAC;YACpC,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;QAC3C,CAAC;KAAA;CACF;;YAzBQ,+EAAc;;AAOV,UAAU;IALtB,+DAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,+EAAkC;;KAEnC,CAAC;GACW,UAAU,CAkBtB;AAlBsB;;;;;;;;;;;;;ACRvB;AAAe,y2BAA0yB,E;;;;;;;;;;;;ACAzzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEmC;AACoB;;;AAGvD;AACA;AACA,iEAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA,uBAAuB,qDAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkB;;AAElB;AACA;;AAEA;AACA;;AAEA,kDAAkB;AAClB;AACA;AACA,qBAAqB,qDAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,kDAAkB;;AAElB;AACA;AACA;AACA;;AAEA,kDAAkB;AAClB;AACA;AACA,qBAAqB,qDAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkB;;AAElB;AACA;AACA;AACA;;;AAGA;AACA;AACA,kDAAkB;AAClB;AACA;AACA,uBAAuB,qDAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkB;;AAElB;AACA;;AAEA;AACA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA,uBAAuB,qDAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkB;;AAElB;AACA;;AAEA;AACA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;;;AAIA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;;AAGA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;;AAGA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;;AAGA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,E;;;;;;;;;;;;;;;;;;;ACh9CyC;AACc;AAEX;AAE5C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wDAAU;KACtB;CACF,CAAC;IAMW,uBAAuB,SAAvB,uBAAuB;CAAG;AAA1B,uBAAuB;IAJnC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBgB;AACZ;AAC2B;AACf;AACG;AACkB;AACI;AACH;IAO7D,cAAc,SAAd,cAAc;IAKzB,YAAmB,SAAuB,EAAS,UAAuB,EAAU,OAAuB;QAAxF,cAAS,GAAT,SAAS,CAAc;QAAS,eAAU,GAAV,UAAU,CAAa;QAAU,YAAO,GAAP,OAAO,CAAgB;QAH3G,QAAG,GAAG,s1MAAs1M,CAAC;IAG/uM,CAAC;IAE/G,QAAQ;QACN,IAAI,CAAC,gBAAgB,GAAG,mDAAc,CAAC,YAAY,EAAC;YAClD,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE;gBACJ,UAAU,EAAE,KAAK;aAGlB;YACD,QAAQ;YACN,iBAAiB;YACjB,cAAc;YACd,kBAAkB;YAClB,cAAc;YACd,gBAAgB;YAChB,kBAAkB;YAClB,aAAa;YACf,IAAI;YACL,QAAQ,EAAG,IAAI;YACd,QAAQ,EAAE,SAAS;YACpB,QAAQ,EAAG,IAAI;YACf,OAAO,EAAG,IAAI;YACd,SAAS,EAAG,EAAE;YACd,QAAQ,EAAG,IAAI;YACf,gBAAgB,EAAG,KAAK;YACxB,eAAe,EAAG,OAAO;YACzB,IAAI,EAAG,IAAI;YACX,KAAK,EAAG,kCAAkC;YAC1C,GAAG,EAAG,KAAK;YACX,MAAM,EAAG,IAAI;YACb,aAAa,EAAG,IAAI;YACnB,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsIR;SACwB,CAAC,CAAC;QAE7B,oGAAoG;QACpG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,yBAAyB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAGnG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,YAAY,EAAC,EAAE;YACtD,IAAI,mDAAc,CAAC,MAAM,KAAK,YAAY,CAAC,IAAI,IAAI,mDAAc,CAAC,MAAM,KAAK,YAAY,CAAC,IAAI,EAC9F;gBACE,oCAAoC;gBACpC,IAAI,IAAI,GAAG,uDAA0B,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBAC5E,6DAA6D;gBAC7D,IAAI,UAAU,GAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;gBAC/B,oDAAoD;gBACpD,IAAI,YAAY,GAAE,UAAU,CAAC,CAAC,CAAC,GAAC,GAAG,CAAC;gBACpC,IAAI,WAAW,GAAE,UAAU,CAAC,CAAC,CAAC,GAAC,GAAG,CAAC;gBACnC,IAAI,aAAa,GAAE,UAAU,CAAC,CAAC,CAAC,GAAC,GAAG,CAAC;gBACrC,+HAA+H;gBAC/H,IAAI,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBACnD,IAAI,WAAW,GAAG,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;gBACtD,2CAA2C;gBAC3C,IAAI,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAEtD,sEAAsE;gBACtE,uCAAuC;gBACvC,2BAA2B;gBAC3B,qCAAqC;gBACrC,yBAAyB;gBACzB,yCAAyC;gBAEzC,uDAAuD;gBACvD,IAAG,WAAW,IAAG,IAAI,EAAC;oBACpB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;yBAClC,SAAS,CAAC,KAAK,CAAC,EAAE;wBACrB,IAAI,OAAO,GAAC,KAAK;wBACjB,OAAO,CAAC,GAAG,CAAC,aAAa,EAAC,OAAO,CAAC;wBAClC,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;oBAC9C,CAAC,CACF;oBACD,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,YAAY,CAAC;yBACvC,SAAS,CAAC,KAAK,CAAC,EAAE;wBACrB,IAAI,YAAY,GAAC,KAAK;wBACtB,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAC,YAAY,CAAC;wBAC7C,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;oBACxD,CAAC,CACF;iBACF;gBACD,qDAAqD;gBACrD,IAAI,UAAU,IAAE,IAAI,EAAC;oBACnB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC;yBACnC,SAAS,CAAC,KAAK,CAAC,EAAE;wBACrB,IAAI,QAAQ,GAAC,KAAK;wBAClB,OAAO,CAAC,GAAG,CAAC,eAAe,EAAC,QAAQ,CAAC;wBACrC,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;oBAChD,CAAC,CACF;oBACD,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC;yBACxC,SAAS,CAAC,KAAK,CAAC,EAAE;wBACrB,IAAI,aAAa,GAAC,KAAK;wBACvB,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAC,aAAa,CAAC;wBAChD,YAAY,CAAC,OAAO,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;oBAC1D,CAAC,CACF;iBACF;gBACD,uGAAuG;gBACvG,IAAG,YAAY,IAAE,IAAI,EAAE;oBACrB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC;yBACpC,SAAS,CAAC,KAAK,CAAC,EAAE;wBACrB,IAAI,QAAQ,GAAC,KAAK;wBAClB,OAAO,CAAC,GAAG,CAAC,eAAe,EAAC,QAAQ,CAAC;wBACrC,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;oBAChD,CAAC,CACF;oBACD,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC;yBACzC,SAAS,CAAC,KAAK,CAAC,EAAE;wBACrB,IAAI,aAAa,GAAC,KAAK;wBACvB,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAC,aAAa,CAAC;wBAChD,YAAY,CAAC,OAAO,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;oBAC1D,CAAC,CACF;iBACF;aACF;QAEH,CAAC,CACA;QAED,4DAA4D;QAC5D,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,mDAAc,CAAC,cAAc,CAAC,CAAC;IACzE,CAAC;IAEM,QAAQ;;YACT,sDAAsD;YACtD,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC1B,2GAA2G;YAC3G,IAAI,SAAS,GAAG,IAAI,CAAC;YACrB,6DAA6D;YAC7D,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC7C,qDAAqD;gBACtD,IAAI,KAAK,CAAC,IAAI,IAAI,aAAa,IAAI,KAAK,CAAC,IAAI,IAAI,eAAe,IAAG,KAAK,CAAC,IAAI,IAAI,aAAa,EAAE;oBAC9F,SAAS,GAAG,KAAK,CAAC;iBAClB;aACF;YACD,iEAAiE;YACjE,IAAI,IAAI,GAAI,uDAA0B,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAClE,6DAA6D;YAC7D,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;iBACzB,SAAS,CAAC,GAAG,CAAC,EAAE;gBACf,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;gBAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,yBAAyB,GAAG,EAAE,CAAC,CAAC;gBAC9F,6BAA6B;gBAC7B,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;gBACpC,+BAA+B;gBAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC,EACD,MAAM,CAAC,EAAE;gBACP,UAAU,CAAC,GAAE,EAAE;oBACf,6BAA6B;oBAC7B,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;oBACpC,wBAAwB;oBACxB,KAAK,CAAC,8DAA8D,CAAC;oBACrE,uDAAuD;gBACzD,CAAC,EAAC,IAAI,CAAC;YAAA,CAAC,CACT,CAAC;QACJ,CAAC;KAAA;CACF;;YAlTQ,sEAAY;YACZ,0FAAW;YACX,wFAAc;;AAOV,cAAc;IAN1B,+DAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,mFAAsC;;KAEvC,CAAC;GAEW,cAAc,CAyS1B;AAzS0B;;;;;;;;;;;;;ACd3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEmC;AACoB;;AAEvD;AACA;;AAEA,iEAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA,kDAAkB;AAClB;AACA;AACA,uBAAuB,qDAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkB;;AAElB;AACA;AACA;AACA;;;;AAIA,kDAAkB;AAClB;AACA;AACA,2BAA2B,qDAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,OAAO;;AAEP,kDAAkB;;AAElB;AACA;AACA;AACA;;AAEA,kDAAkB;AAClB;AACA;AACA,qBAAqB,qDAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,CAAC;;AAED,kDAAkB;;AAElB;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,kDAAkB;AAClB;AACA;AACA,uBAAuB,qDAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkB;;AAElB;AACA;;AAEA;AACA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA,uBAAuB,qDAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkB;;AAElB;AACA;;AAEA;AACA;;;;AAIA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;AAEA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;;;;AAIA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,kDAAkB;AAClB;AACA;AACA;AACA,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","file":"src-app-members-teacher-Pages-t-space-t-space-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { KillAllService } from 'src/app/services/killAll.service';\n\n@Component({\n  selector: 'app-t-space',\n  templateUrl: './t-space.page.html',\n  styleUrls: ['./t-space.page.scss'],\n})\nexport class TSpacePage implements OnInit {\n  public singleBlockly = true;\n  public dualBlockly = false;\n  constructor(private killAllService: KillAllService) { }\n\n  ngOnInit() {\n    this.killAllService\n    localStorage.removeItem('listReg');\n    localStorage.removeItem('listLatinReg');\n    localStorage.removeItem('listRegTeacher');\n    localStorage.removeItem('listLatinRegTeacher');\n    localStorage.removeItem('listProvTeacher');\n    localStorage.removeItem('listLatinProvTeacher');\n  }\n  async showDualBlockly(){\n    this.dualBlockly =!this.dualBlockly;\n    this.singleBlockly = !this.singleBlockly;\n  }\n}\n","export default \"<ion-content>\\n  <table width=\\\"100%\\\">\\n    <tr>\\n      <td>\\n        <div id=\\\"primaryDiv\\\"></div>\\n      </td>\\n      <td>\\n        <div id=\\\"secondaryDiv\\\"></div>\\n      </td>\\n      <td>\\n        <iframe [src]=\\\"geeMap\\\" frameborder=\\\"0\\\" allowfullscreen id=\\\"gee_map\\\"></iframe>\\n      </td>\\n      <td>\\n        <iframe [src]=\\\"geeMap2\\\" frameborder=\\\"0\\\" allowfullscreen id=\\\"gee_map2\\\"></iframe>\\n      </td>\\n    </tr>\\n  </table>\\n    <p id=\\\"stepButton\\\">\\n     <ion-button (click)=\\\"stepCode()\\\" color=\\\"primary\\\">\\n       <ion-icon name = \\\"play-outline\\\"></ion-icon>\\n     </ion-button>\\n    </p>\\n    <p id=\\\"stepButton2\\\">\\n      <ion-button (click)=\\\"stepCode2()\\\" color=\\\"primary\\\">\\n        <ion-icon name = \\\"play-outline\\\"></ion-icon>\\n      </ion-button>\\n     </p>\\n</ion-content>\\n\\n\";","//-------------------------------------//\n//Importación de librerías necesarias. Blockly con todo y Javascript para hacer código js (Seguramente cambiaremos a Python!!!!!!!!) \n\nimport * as Blockly from 'blockly';\nimport \"node_modules/blockly/javascript_compressed.js\";\n\n\n//-------------------------------------//\n//Definición de ls bloques mediante un array de JSON\nBlockly.defineBlocksWithJsonArray([\n\n  //TERRESTIAL FRONTIERS\n  {\n    \"type\": \"look_country_dual\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"input1\",\n        \"text\": \"Escribe el país\",\n      },\n      {\n        \"type\": \"input_dummy\",\n        \"name\": \"INPUT\",\n        \"text\": \"paises\",\n      }\n    ],\n    \"nextStatement\": [\n    \"country-layer\",\n    \"country-date\",\n    \"country-addition\",\n    \"country-region\"\n  ],\n  \"extensions\": [\"teacher_dynamic_dual\"],\n  \"colour\": 315\n  },\n\n  {\n    \"type\": \"look_regions\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"input1\",\n        \"text\": \"Escribe la región\",\n      },\n      {\n        \"type\": \"input_dummy\",\n        \"name\": \"INPUT\",\n        \"text\": \"regiones\",\n      }\n    ],\n    \"previousStatement\": \"country-region\",\n    \"nextStatement\": [\n      \"region-layer\",\n      \"region-date\",\n      \"region-addition\",\n      \"region-city\"\n  ],\n  \"extensions\": [\"dynamic_extension2_teacher_dual\"],\n  \"colour\": 180\n  },\n\n  {\n    \"type\": \"look_province\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"input1\",\n        \"text\": \"Escribe la provincia\",\n      },\n      {\n        \"type\": \"input_dummy\",\n        \"name\": \"INPUT\",\n        \"text\": \"provincias\",\n      }\n    ],\n    \"previousStatement\": \"region-city\",\n    \"nextStatement\": [\n      \"city-layer\",\n      \"city-date\",\n      \"city-addition\"\n  ],\n  \"extensions\": [\"dynamic_extension3_teacher_dual\"],\n  \"colour\": 127\n},\n\n//OCEANIC FRONTIERS\n{\n  \"type\": \"look_oceans_dual\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\": \"field_input\",\n      \"name\": \"input1\",\n      \"text\": \"Escribe la región marina\",\n    },\n    {\n      \"type\": \"input_dummy\",\n      \"name\": \"INPUT\",\n      \"text\": \"agua\",\n    }\n  ],\n  \"nextStatement\": [\n  \"country-layer\",\n  \"country-date\",\n  \"country-addition\",\n  \"country-region\"\n],\n\"extensions\": [\"big_water_dynamic_dual_teacher\"],\n\"colour\": 90\n},\n{\n  \"type\": \"look_seas_dual\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\": \"field_input\",\n      \"name\": \"input1\",\n      \"text\": \"Escribe la región marina\",\n    },\n    {\n      \"type\": \"input_dummy\",\n      \"name\": \"INPUT\",\n      \"text\": \"agua\",\n    }\n  ],\n  \"nextStatement\": [\n  \"country-layer\",\n  \"country-date\",\n  \"country-addition\",\n  \"country-region\"\n],\n\"extensions\": [\"big_mares_dynamic_dual_teacher\"],\n\"colour\": 210\n},\n\n\n//Vegetación\n{\n  \"type\": \"layer_tree\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/125/125215.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"TREE\",\n      \"text\": \"Árboles\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 90,\n},\n{\n  \"type\": \"layer_ndvi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/128/128818.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NDVI\",\n      \"text\": \"Cantidad de vegetación\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 100,\n},\n{\n  \"type\": \"layer_fires\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/114/114466.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"FIRES\",\n      \"text\": \"incendios\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 110,\n},\n{\n  \"type\": \"layer_tree_loss\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/98/98442.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"TREE_LOSS\",\n      \"text\": \"Pérdida de árboles\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 120,\n},\n{\n  \"type\": \"layer_gcvi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/125/125203.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"GCVI\",\n      \"text\": \"Salud de Vegetación\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 130,\n}, \n\n\n\n//Suelo\n{\n  \"type\": \"layer_ndmi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/31/31655.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NDMI\",\n      \"text\": \"Humedad del suelo\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 0,\n},\n{\n  \"type\": \"layer_alt\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/120/120198.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"ALT\",\n      \"text\": \"Relieve\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 10,\n},\n{\n  \"type\": \"layer_cover\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/15/15719.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"COVER\",\n      \"text\": \"Tipo de suelo\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 20,\n},\n{\n  \"type\": \"layer_landforms\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/93/93678.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"LANDFORMS\",\n      \"text\": \"Tipos de relieve\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 30,\n},\n\n\n\n//Atmósfera\n{\n  \"type\": \"layer_tot_prep\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/116/116257.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"TOT_PREP\",\n      \"text\": \"Lluvias\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 165,\n},\n{\n  \"type\": \"layer_cloud\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/128/128853.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"CLOUD\",\n      \"text\": \"Nubes\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 168,\n},\n{\n  \"type\": \"layer_surf_press\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/119/119487.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SURF_PRESS\",\n      \"text\": \"Presión\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 171,\n},\n{\n  \"type\": \"layer_dewp_temp\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/12/12209.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"DEWP_TEMP\",\n      \"text\": \"Temperatura para niebla\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 174,\n},\n{\n  \"type\": \"layer_air_temp\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/120/120780.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"AIR_TEMP\",\n      \"text\": \"Temperatura del aire\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 177,\n},\n{\n  \"type\": \"layer_10m_wind\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/116/116720.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"10M_WIND\",\n      \"text\": \"Viento\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 180,\n},\n\n\n\n//Agua\n{\n  \"type\": \"layer_ndwi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/102/102438.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NDWI\",\n      \"text\": \"Lagos\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 210,\n},\n{\n  \"type\": \"layer_sea_press\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/119/119487.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SEA_PRESS\",\n      \"text\": \"Presión en el mar\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 220,\n},\n{\n  \"type\": \"layer_sea_temp\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/120/120779.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SEA_TEMP\",\n      \"text\": \"Temperatura del mar\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 230,\n},\n{\n  \"type\": \"layer_river\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/102/102444.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"RIVER\",\n      \"text\": \"Ríos\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 240,\n},\n\n\n\n//Gases\n{\n  \"type\": \"layer_aer_ai\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/104/104960.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"AER_AI\",\n      \"text\": \"Aerosoles\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 60,\n},\n{\n  \"type\": \"layer_so2\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/108/108256.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SO2\",\n      \"text\": \"Dióxido de azufre\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 62.5,\n},\n{\n  \"type\": \"layer_no2\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/70/70927.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NO2\",\n      \"text\": \"Dióxido de nitrógeno\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 65.0,\n},\n{\n  \"type\": \"layer_hcho\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/61/61294.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"HCHO\",\n      \"text\": \"Metanal\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 67.5,\n},\n{\n  \"type\": \"layer_ch4\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/102/102880.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"CH4\",\n      \"text\": \"Metano\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 70.0,\n},\n{\n  \"type\": \"layer_co\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/130/130068.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"CO\",\n      \"text\": \"Monóxido de carbono\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 72.5,\n},\n{\n  \"type\": \"layer_o3\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/103/103678.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"O3\",\n      \"text\": \"Ozono\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 75.0,\n},\n\n\n\n//Civilización\n{\n  \"type\": \"layer_den\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/33/33887.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"DEN\",\n      \"text\": \"Densidad de población\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": \"#D1D1D1\",\n},\n{\n  \"type\": \"layer_light\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/113/113742.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"LIGHT\",\n      \"text\": \"Luces nocturnas\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": \"#C3C3C3\",\n},\n{\n  \"type\": \"layer_human\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/129/129863.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"HUMAN\",\n      \"text\": \"Modificado por el humano\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": \"#ACACAC\",\n},\n\n\n//Specials\n{\n  \"type\": \"transparency_level\",\n  \"message0\": \"Nivel de transparencia %1\",\n  \"args0\": [\n    {\n      \"type\": \"field_dropdown\",\n      \"name\": \"transparency\",\n      \"options\": [\n        [\n          \"Bajo\",\n          \"0.75\"\n        ],\n        [\n          \"Medio\",\n          \"0.5\"\n        ],\n        [\n          \"Alto\",\n          \"0.3\"\n        ],\n        [\n          \"Nada\",\n          \"1\"\n        ]\n      ]\n    }\n  ],\n  \"previousStatement\": [\n  \"layer-date\"\n],\n  \"nextStatement\": [\n  \"layer-date\"\n],\n  \"colour\": \"#CF71BB\",\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n}\n]);\n\n\n\n//-------------------------------------//\n\nvar list=[[\"Afganistán\",\"Afghanistan\"],[\"Albania\",\"Albania\"],[\"Argelia\",\"Algeria\"],[\"Andorra\",\"Andorra\"],[\"Angola\",\"Angola\"],[\"Antigua y Barbuda\",\"Antigua and Barbuda\"],[\"Argentina\",\"Argentina\"],[\"Armenia\",\"Armenia\"],[\"Australia\",\"Australia\"],[\"Austria\",\"Austria\"],[\"Azerbaiyán\",\"Azerbaijan\"],[\"Bahamas\",\"Bahamas\"],[\"Bahrein\",\"Bahrain\"],[\"Bangladesh\",\"Bangladesh\"],[\"Barbados\",\"Barbados\"],[\"Bielorrusia\",\"Belarus\"],[\"Bélgica\",\"Belgium\"],[\"Belice\",\"Belize\"],[\"Benin\",\"Benin\"],[\"Bután\",\"Bhutan\"],[\"Bolivia\",\"Bolivia\"],[\"Bosnia y Herzegovina\",\"Bosnia and Herzegovina\"],[\"Botsuana\",\"Botswana\"],[\"Brasil\",\"Brazil\"],[\"Brunei Darussalam\",\"Brunei Darussalam\"],[\"Bulgaria\",\"Bulgaria\"],[\"Burkina Faso\",\"Burkina Faso\"],[\"Burundi\",\"Burundi\"],[\"Cabo Verde\",\"Cabo Verde\"],[\"Camboya\",\"Cambodia\"],[\"Camerún\",\"Cameroon\"],[\"Canadá\",\"Canada\"],[\"República Centroafricana\",\"Central African Republic\"],[\"Chad\",\"Chad\"],[\"Chile\",\"Chile\"],[\"China\",\"China\"],[\"Colombia\",\"Colombia\"],[\"Comoras\",\"Comoros\"],[\"Congo\",\"Congo\"],[\"Islas Cook\",\"Cook Islands\"],[\"Costa Rica\",\"Costa Rica\"],[\"Croacia\",\"Croatia\"],[\"Cuba\",\"Cuba\"],[\"Chipre\",\"Cyprus\"],[\"Chequia\",\"Czech Republic\"],[\"Costa de Marfil\",\"C�te d'Ivoire\"],[\"Corea del Norte\",\"Dem People's Rep of Korea\"],[\"República Democrática del Congo\",\"Democratic Republic of the Congo\"],[\"Dinamarca\",\"Denmark\"],[\"Djibouti\",\"Djibouti\"],[\"Dominica\",\"Dominica\"],[\"República Dominicana\",\"Dominican Republic\"],[\"Ecuador\",\"Ecuador\"],[\"Egipto\",\"Egypt\"],[\"El Salvador\",\"El Salvador\"],[\"Guinea Ecuatorial\",\"Equatorial Guinea\"],[\"Eritrea\",\"Eritrea\"],[\"Estonia\",\"Estonia\"],[\"Esuatini\",\"Eswatini\"],[\"Etiopía\",\"Ethiopia\"],[\"Islas Faroe\",\"Faroe Islands\"],[\"Fiji\",\"Fiji\"],[\"Finlandia\",\"Finland\"],[\"Francia\",\"France\"],[\"Gabón\",\"Gabon\"],[\"Gambia\",\"Gambia\"],[\"Georgia\",\"Georgia\"],[\"Alemania\",\"Germany\"],[\"Ghana\",\"Ghana\"],[\"Grecia\",\"Greece\"],[\"Granada\",\"Grenada\"],[\"Guatemala\",\"Guatemala\"],[\"Guinea\",\"Guinea\"],[\"Guinea-Bissau\",\"Guinea-Bissau\"],[\"Guayana\",\"Guyana\"],[\"Haití\",\"Haiti\"],[\"Honduras\",\"Honduras\"],[\"Hungría\",\"Hungary\"],[\"Islandia\",\"Iceland\"],[\"India\",\"India\"],[\"Indonesia\",\"Indonesia\"],[\"Irán\",\"Iran (Islamic Republic of)\"],[\"Irak\",\"Iraq\"],[\"Irlanda\",\"Ireland\"],[\"Israel\",\"Israel\"],[\"Italia\",\"Italy\"],[\"Jamaica\",\"Jamaica\"],[\"Japón\",\"Japan\"],[\"Jordania\",\"Jordan\"],[\"Kazajistán\",\"Kazakhstan\"],[\"Kenia\",\"Kenya\"],[\"Kiribati\",\"Kiribati\"],[\"Kuwait\",\"Kuwait\"],[\"Kirguistán\",\"Kyrgyzstan\"],[\"República Democrática Popular de Lao\",\"Lao People's Democratic Republic\"],[\"Letonia\",\"Latvia\"],[\"Líbano\",\"Lebanon\"],[\"Lesoto\",\"Lesotho\"],[\"Liberia\",\"Liberia\"],[\"Libia\",\"Libya\"],[\"Lituania\",\"Lithuania\"],[\"Luxemburgo\",\"Luxembourg\"],[\"Madagascar\",\"Madagascar\"],[\"Malawi\",\"Malawi\"],[\"Malasia\",\"Malaysia\"],[\"Maldivas\",\"Maldives\"],[\"Mali\",\"Mali\"],[\"Malta\",\"Malta\"],[\"Islas Marshall\",\"Marshall Islands\"],[\"Mauritania\",\"Mauritania\"],[\"Mauricio\",\"Mauritius\"],[\"México\",\"Mexico\"],[\"Micronesia\",\"Micronesia (Federated States of)\"],[\"Mónaco\",\"Monaco\"],[\"Mongolia\",\"Mongolia\"],[\"Montenegro\",\"Montenegro\"],[\"Marruecos\",\"Morocco\"],[\"Mozambique\",\"Mozambique\"],[\"Myanmar\",\"Myanmar\"],[\"Namibia\",\"Namibia\"],[\"Nauru\",\"Nauru\"],[\"Nepal\",\"Nepal\"],[\"Países Bajos\",\"Netherlands\"],[\"Nueva Zelanda\",\"New Zealand\"],[\"Nicaragua\",\"Nicaragua\"],[\"Níger\",\"Niger\"],[\"Nigeria\",\"Nigeria\"],[\"Niue\",\"Niue\"],[\"Macedonia del Norte\",\"North Macedonia\"],[\"Noruega\",\"Norway\"],[\"Omán\",\"Oman\"],[\"Pakistán\",\"Pakistan\"],[\"Palau\",\"Palau\"],[\"Panamá\",\"Panama\"],[\"Papúa Nueva Guinea\",\"Papua New Guinea\"],[\"Paraguay\",\"Paraguay\"],[\"Perú\",\"Peru\"],[\"Filipinas\",\"Philippines\"],[\"Polonia\",\"Poland\"],[\"Portugal\",\"Portugal\"],[\"Katar\",\"Qatar\"],[\"República de Corea\",\"Republic of Korea\"],[\"República de Moldavia\",\"Republic of Moldova\"],[\"Rumanía\",\"Romania\"],[\"Rusia\",\"Russian Federation\"],[\"Ruanda\",\"Rwanda\"],[\"Saint Kitts y Nevis\",\"Saint Kitts and Nevis\"],[\"Santa Lucía\",\"Saint Lucia\"],[\"San Vicente y las Granadinas\",\"Saint Vincent and the Grenadines\"],[\"Samoa\",\"Samoa\"],[\"San Marino\",\"San Marino\"],[\"Santo Tomé y Príncipe\",\"Sao Tome and Principe\"],[\"Arabia Saudita\",\"Saudi Arabia\"],[\"Senegal\",\"Senegal\"],[\"Serbia\",\"Serbia\"],[\"Seychelles\",\"Seychelles\"],[\"Sierra Leona\",\"Sierra Leone\"],[\"Singapur\",\"Singapore\"],[\"Eslovaquia\",\"Slovakia\"],[\"Eslovenia\",\"Slovenia\"],[\"Islas Salomón\",\"Solomon Islands\"],[\"Somalia\",\"Somalia\"],[\"Sudáfrica\",\"South Africa\"],[\"Sudán del Sur\",\"South Sudan\"],[\"España\",\"Spain\"],[\"Sri Lanka\",\"Sri Lanka\"],[\"Sudán\",\"Sudan\"],[\"Suriname\",\"Suriname\"],[\"Suecia\",\"Sweden\"],[\"Suiza\",\"Switzerland\"],[\"República Árabe Siria\",\"Syrian Arab Republic\"],[\"Tayikistán\",\"Tajikistan\"],[\"Tailandia\",\"Thailand\"],[\"Timor-Leste\",\"Timor-Leste\"],[\"Togo\",\"Togo\"],[\"Tokelau\",\"Tokelau\"],[\"Tonga\",\"Tonga\"],[\"Trinidad y Tobago\",\"Trinidad and Tobago\"],[\"Túnez\",\"Tunisia\"],[\"Turquía\",\"Turkey\"],[\"Turkmenistán\",\"Turkmenistan\"],[\"Tuvalu\",\"Tuvalu\"],[\"Uganda\",\"Uganda\"],[\"Ucrania\",\"Ukraine\"],[\"Emiratos Árabes Unidos\",\"United Arab Emirates\"],[\"Reino Unido\",\"U.K. of Great Britain and Northern Ireland\"],[\"República Unida de Tanzania\",\"United Republic of Tanzania\"],[\"Estados Unidos de América\",\"United States of America\"],[\"Uruguay\",\"Uruguay\"],[\"Uzbekistán\",\"Uzbekistan\"],[\"Vanuatu\",\"Vanuatu\"],[\"Venezuela\",\"Venezuela (Bolivarian Republic of)\"],[\"Vietnam\",\"Viet Nam\"],[\"Yemen\",\"Yemen\"],[\"Zambia\",\"Zambia\"],[\"Zimbabue\",\"Zimbabwe\"]];\nBlockly.Extensions.register('teacher_dynamic_dual',\n  function() {\n    this.getInput('INPUT')\n      .appendField(new Blockly.FieldDropdown(\n        function() {\n          var options = [];\n          var coincidence = [];\n          var searchVal = \"españa\";\n          var block = this.getSourceBlock();\n          for (var i=0 ; i < list.length ; i++)\n        {\n          options.push([list[i][0],list[i][1]]);\n        }\n          if (block){\n            searchVal = block.getFieldValue('input1');\n          }\n          for (var j=0 ; j < list.length ; j++)\n        {\n          if (list[j][0].toLowerCase().includes(searchVal.toLowerCase())){\n            coincidence.push([list[j][0],list[j][1]]);\n          }\n          if (coincidence.length > 0){\n             options = coincidence;\n          }\n        }\n          return options;\n        }\n      ), 'country'\n    );\n  }\n);\n\nBlockly.JavaScript['look_country_dual'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code_country = 'country=' + dropdown_value + ',';\n\n  return code_country;\n};\n\nBlockly.Extensions.register('dynamic_extension2_teacher_dual',\nfunction() {\n  this.getInput('INPUT')\n    .appendField(new Blockly.FieldDropdown(\n      function() {\n        var listRaw=localStorage.getItem('listRegTeachDual');\n        var listLatinRaw=localStorage.getItem('listLatinRegTeachDual');\n        if (listRaw==null && listLatinRaw==null){\n          var listReg=[\"\"]\n          var listLatinReg=[\"\"]\n        }\n        else if (listRaw==null ){\n          var listReg=[\"\"]\n          var listLatinReg=[\"\"]\n        }\n        else if (listLatinRaw==null){\n          var listReg=[\"\"]\n          var listLatinReg=[\"\"]\n        }\n        else if (listLatinRaw==\"None\"){\n          var listReg=listRaw.split([\", \"])\n          var listLatinReg=listRaw.split([\", \"])\n        }\n        else{\n          var listReg=listRaw.split([\", \"])\n          var listLatinReg=listLatinRaw.split([\", \"])\n        }\n        var options = [];\n        var coincidence = [];\n        var searchVal = listReg[0];\n        var block = this.getSourceBlock();\n        for (var i=0 ; i < listReg.length ; i++)\n      {\n        options.push([listLatinReg[i],listReg[i]]);\n      }\n        if (block){\n          searchVal = block.getFieldValue('input1');\n        }\n        for (var j=0 ; j < listReg.length ; j++)\n      {\n        if (listReg[j].toLowerCase().includes(searchVal.toLowerCase())){\n          coincidence.push([listLatinReg[j],listReg[j]]);\n        }\n        if (coincidence.length > 0){\n           options = coincidence;\n        }\n      }\n        return options;\n      }\n    ),'region'\n  );\n});\n\nBlockly.JavaScript['look_regions'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'region=' + dropdown_value + ',';\n  return code;\n};\n\nBlockly.Extensions.register('dynamic_extension3_teacher_dual',\nfunction() {\n  this.getInput('INPUT')\n    .appendField(new Blockly.FieldDropdown(\n      function() {\n        var listRaw=localStorage.getItem('listProvTeachDual');\n        var listLatinRaw=localStorage.getItem('listLatinProvTeachDual');\n        if (listRaw==null && listLatinRaw==null){\n          var listProv=[\"\"]\n          var listLatinProv=[\" \"]\n        }\n        else if (listRaw==null ){\n          var listProv=[\"\"]\n          var listLatinProv=[\" \"]\n        }\n        else if (listLatinRaw==null ){\n          var listProv=[\"\"]\n          var listLatinProv=[\" \"]\n        }\n        else if (listLatinRaw==\"None\"){\n          var listProv=listRaw.split([\", \"])\n          var listLatinProv=listRaw.split([\", \"])\n        }\n        else{\n          var listProv=listRaw.split([\", \"])\n          var listLatinProv=listLatinRaw.split([\", \"])\n        }\n        var options = [];\n        var coincidence = [];\n        var searchVal = listProv[0];\n        var block = this.getSourceBlock();\n        for (var i=0 ; i < listProv.length ; i++)\n      {\n        options.push([listLatinProv[i],listProv[i]]);\n      }\n        if (block){\n          searchVal = block.getFieldValue('input1');\n        }\n        for (var j=0 ; j < listProv.length ; j++)\n      {\n        if (listProv[j].toLowerCase().includes(searchVal.toLowerCase())){\n          coincidence.push([listLatinProv[j],listProv[j]]);\n        }\n        if (coincidence.length > 0){\n           options = coincidence;\n        }\n      }\n        return options;\n      }\n      ), 'province');\n   }\n);\n\nBlockly.JavaScript['look_province'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'province=' + dropdown_value + ',';\n  return code;\n};\n\n\n//OCEANIC FRONTIERS\nvar water=[[\"Antártico\",\"Antartic Ocean\"],[\"Mares Árabes\",\"Arabian Seas\"],[\"Ártico\",\"Artic Ocean\"],[\"Atlántico\",\"Atlantic Ocean\"],[\"Mar Negro\",\"Black Sea\"],[\"Mares de Centro América\",\"Central American Seas\"],[\"Mares del Este Asiático\",\"East Asian Seas\"],[\"Índico\",\"Indian Ocean\"],[\"Mar Mediterráneo\",\"Mediterranean Sea\"],[\"Mares de Norte América\",\"North American Seas\"],[\"Mares del Norte de Europa\",\"North European Seas\"],[\"Pacífico\",\"Pacific Ocean\"]];\nBlockly.Extensions.register('big_water_dynamic_dual_teacher',\n  function() {\n    this.getInput('INPUT')\n      .appendField(new Blockly.FieldDropdown(\n        function() {\n          var options = [];\n          var coincidence = [];\n          var searchVal = \"mediterráneo\";\n          var block = this.getSourceBlock();\n          for (var i=0 ; i < water.length ; i++)\n        {\n          options.push([water[i][0],water[i][1]]);\n        }\n          if (block){\n            searchVal = block.getFieldValue('input1');\n          }\n          for (var j=0 ; j < water.length ; j++)\n        {\n          if (water[j][0].toLowerCase().includes(searchVal.toLowerCase())){\n            coincidence.push([water[j][0],water[j][1]]);\n          }\n          if (coincidence.length > 0){\n             options = coincidence;\n          }\n        }\n          return options;\n        }\n      ), 'ocean'\n    );\n  }\n);\n\nBlockly.JavaScript['look_oceans_dual'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'ocean=' + dropdown_value + ',';\n\n  return code;\n};\n\nvar mares=[[\"Mar Egeo\",\"Aegean Sea\"],[\"Mar de Alborán\",\"Alboran Sea\"],[\"Andam\",\"Andaman or Burma Sea\"],[\"Mar Arabe\",\"Arabian Sea\"],[\"Arafura mar\",\"Arafura Sea\"],[\"océano Ártico\",\"Arctic Ocean\"],[\"Bahía de BAFFIN\",\"Baffin Bay\"],[\"Baleares (Mar ibérico)\",\"Balearic (Iberian Sea)\"],[\"Mar Bali\",\"Bali Sea\"],[\"mar Báltico\",\"Baltic Sea\"],[\"Banda Sea\",\"Banda Sea\"],[\"Marentsz Mar\",\"Barentsz Sea\"],[\"Estrecho de bajo\",\"Bass Strait\"],[\"Bahía de Bengala\",\"Bay of Bengal\"],[\"Golfo de Vizcaya\",\"Bay of Biscay\"],[\"Bahía de Fundy\",\"Bay of Fundy\"],[\"Marufort\",\"Beaufort Sea\"],[\"Mar de Bering\",\"Bering Sea\"],[\"Bismarck Sea\",\"Bismarck Sea\"],[\"Mar Negro\",\"Black Sea\"],[\"Canal de bristol\",\"Bristol Channel\"],[\"Mar Caribe\",\"Caribbean Sea\"],[\"Celebes mar\",\"Celebes Sea\"],[\"mar Céltico\",\"Celtic Sea\"],[\"Mar de ceram\",\"Ceram Sea\"],[\"Mar Chukchi\",\"Chukchi Sea\"],[\"Coral Sea\",\"Coral Sea\"],[\"Estrecho de Davis\",\"Davis Strait\"],[\"Mar Siberiano Oriental\",\"East Siberian Sea\"],[\"Mar de China oriental\",\"Eastern China Sea\"],[\"canal inglés\",\"English Channel\"],[\"Flores Sea\",\"Flores Sea\"],[\"Gran bight australiano\",\"Great Australian Bight\"],[\"Mar de Groenlandia\",\"Greenland Sea\"],[\"Golfo de Aden\",\"Gulf of Aden\"],[\"Golfo de Alaska\",\"Gulf of Alaska\"],[\"Golfo de Aqaba\",\"Gulf of Aqaba\"],[\"Golfo de boni.\",\"Gulf of Boni\"],[\"Golfo de ambos\",\"Gulf of Bothnia\"],[\"Golfo de California\",\"Gulf of California\"],[\"Golfo de Finlandia\",\"Gulf of Finland\"],[\"Golfo de Guinea\",\"Gulf of Guinea\"],[\"Golfo de Guinea\",\"Gulf of Guinea\"],[\"Golfo de México\",\"Gulf of Mexico\"],[\"Golfo de Omán\",\"Gulf of Oman\"],[\"Golfo de Riga\",\"Gulf of Riga\"],[\"Golfo de St. Lawrence\",\"Gulf of St. Lawrence\"],[\"Golfo de Suez\",\"Gulf of Suez\"],[\"Golfo de Tailandia\",\"Gulf of Thailand\"],[\"Golfo de Tomini\",\"Gulf of Tomini\"],[\"Mar de halmahero\",\"Halmahera Sea\"],[\"Bahía Hudson\",\"Hudson Bay\"],[\"Estrecho de Hudson\",\"Hudson Strait\"],[\"océano Indio\",\"Indian Ocean\"],[\"Mas interiores de la costa oeste de Escocia\",\"Inner Seas off the West Coast of Scotland\"],[\"mar Jónico\",\"Ionian Sea\"],[\"Mar irlandés y canal de San Jorge\",\"Irish Sea and St. George's Channel\"],[\"Mar de Japón\",\"Japan Sea\"],[\"Java Sea\",\"Java Sea\"],[\"Mar Kara\",\"Kara Sea\"],[\"Kattegat\",\"Kattegat\"],[\"Labrador Sea\",\"Labrador Sea\"],[\"Laccadive Sea\",\"Laccadive Sea\"],[\"Mar de lapevo\",\"Laptev Sea\"],[\"Mar Liguria\",\"Ligurian Sea\"],[\"Lincoln mar\",\"Lincoln Sea\"],[\"Estrecho de Makassar\",\"Makassar Strait\"],[\"Estrecho de malacca\",\"Malacca Strait\"],[\"Mar Mediterráneo - Cuenca Oriental\",\"Mediterranean Sea - Eastern Basin\"],[\"Mar Mediterráneo - Cuenca occidental\",\"Mediterranean Sea - Western Basin\"],[\"Mar molecular\",\"Molukka Sea\"],[\"Canal de mozambique\",\"Mozambique Channel\"],[\"océano Atlántico Norte\",\"North Atlantic Ocean\"],[\"océano Pacífico Norte\",\"North Pacific Ocean\"],[\"mar del Norte\",\"North Sea\"],[\"Mar de Noruega\",\"Norwegian Sea\"],[\"Golfo pérsico\",\"Persian Gulf\"],[\"Mar filipino\",\"Philippine Sea\"],[\"Red Sea\",\"Red Sea\"],[\"Rio de La Plata\",\"Rio de La Plata\"],[\"Tu mar\",\"Savu Sea\"],[\"Mar de Azov\",\"Sea of Azov\"],[\"Mar de Mármara\",\"Sea of Marmara\"],[\"Mar de Okhotsk\",\"Sea of Okhotsk\"],[\"Ver o interior\",\"Seto Naikai or Inland Sea\"],[\"Skagerrak\",\"Skagerrak\"],[\"Solomon Mar\",\"Solomon Sea\"],[\"Océano Atlántico Sur\",\"South Atlantic Ocean\"],[\"mar del Sur de China\",\"South China Sea\"],[\"oceano Pacifico del Sur\",\"South Pacific Ocean\"],[\"Oceano del Sur\",\"Southern Ocean\"],[\"Estrecho de Gibraltar\",\"Strait of Gibraltar\"],[\"Mar del mar\",\"Sulu Sea\"],[\"Mar de Tasmania\",\"Tasman Sea\"],[\"Las aguas costeras del sureste de Alaska y la Columbia Británica.\",\"The Coastal Waters of Southeast Alaska and British Columbia\"],[\"Los pasajes noroeste\",\"The Northwestern Passages\"],[\"Timor Sea\",\"Timor Sea\"],[\"Mar Tirreno\",\"Tyrrhenian Sea\"],[\"mar Blanco\",\"White Sea\"],[\"Mar Amarillo\",\"Yellow Sea\"]]\nBlockly.Extensions.register('big_mares_dynamic_dual_teacher',\n  function() {\n    this.getInput('INPUT')\n      .appendField(new Blockly.FieldDropdown(\n        function() {\n          var options = [];\n          var coincidence = [];\n          var searchVal = \"albo\";\n          var block = this.getSourceBlock();\n          for (var i=0 ; i < mares.length ; i++)\n        {\n          options.push([mares[i][0],mares[i][1]]);\n        }\n          if (block){\n            searchVal = block.getFieldValue('input1');\n          }\n          for (var j=0 ; j < mares.length ; j++)\n        {\n          if (mares[j][0].toLowerCase().includes(searchVal.toLowerCase())){\n            coincidence.push([mares[j][0],mares[j][1]]);\n          }\n          if (coincidence.length > 0){\n             options = coincidence;\n          }\n        }\n          return options;\n        }\n      ), 'sea'\n    );\n  }\n);\n\nBlockly.JavaScript['look_seas_dual'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'sea=' + dropdown_value + ',';\n\n  return code;\n};\n\n//Vegetación \nBlockly.JavaScript['layer_tree'] = function(block) {\n  var code = 'layer=TREE,';\n  return code;\n};\nBlockly.JavaScript['layer_ndvi'] = function(block) {\n  var code = 'layer=NDVI,';\n  return code;\n};\nBlockly.JavaScript['layer_fires'] = function(block) {\n  var code = 'layer=FIRE,';\n  return code;\n};\nBlockly.JavaScript['layer_tree_loss'] = function(block) {\n  var code = 'layer=TREE_LOSS,';\n  return code;\n};\nBlockly.JavaScript['layer_gcvi'] = function(block) {\n  var code = 'layer=GCVI,';\n  return code;\n};\n\n//Suelo\nBlockly.JavaScript['layer_ndmi'] = function(block) {\n  var code = 'layer=NDMI,';\n  return code;\n};\nBlockly.JavaScript['layer_alt'] = function(block) {\n  var code = 'layer=ALT,';\n  return code;\n};\nBlockly.JavaScript['layer_cover'] = function(block) {\n  var code = 'layer=COVER,';\n  return code;\n};\nBlockly.JavaScript['layer_landforms'] = function(block) {\n  var code = 'layer=LANDFORMS,';\n  return code;\n};\n\n//Atmósfera\nBlockly.JavaScript['layer_tot_prep'] = function(block) {\n  var code = 'layer=TOT_PREP,';\n  return code;\n};\nBlockly.JavaScript['layer_cloud'] = function(block) {\n  var code = 'layer=CLOUDS,';\n  return code;\n};\nBlockly.JavaScript['layer_surf_press'] = function(block) {\n  var code = 'layer=SURF_PRESS,';\n  return code;\n};\nBlockly.JavaScript['layer_dewp_temp'] = function(block) {\n  var code = 'layer=DEWP_TEMP,';\n  return code;\n};\nBlockly.JavaScript['layer_air_temp'] = function(block) {\n  var code = 'layer=AIR_TEMP,';\n  return code;\n};\nBlockly.JavaScript['layer_10m_wind'] = function(block) {\n  var code = 'layer=10M_WIND,';\n  return code;\n};\n\n\n\n//Agua\nBlockly.JavaScript['layer_ndwi'] = function(block) {\n  var code = 'layer=NDWI,';\n  return code;\n};\nBlockly.JavaScript['layer_sea_press'] = function(block) {\n  var code = 'layer=SEA_PRESS,';\n  return code;\n};\nBlockly.JavaScript['layer_sea_temp'] = function(block) {\n  var code = 'layer=SEA_TEMP,';\n  return code;\n};\nBlockly.JavaScript['layer_river'] = function(block) {\n  var code = 'layer=RIVER,';\n  return code;\n};\n\n\n//Gases\nBlockly.JavaScript['layer_aer_ai'] = function(block) {\n  var code = 'layer=AER_AI,';\n  return code;\n};\nBlockly.JavaScript['layer_so2'] = function(block) {\n  var code = 'layer=SO2,';\n  return code;\n};\nBlockly.JavaScript['layer_no2'] = function(block) {\n  var code = 'layer=NO2,';\n  return code;\n};\nBlockly.JavaScript['layer_hcho'] = function(block) {\n  var code = 'layer=HCHO,';\n  return code;\n};\nBlockly.JavaScript['layer_ch4'] = function(block) {\n  var code = 'layer=CH4,';\n  return code;\n};\nBlockly.JavaScript['layer_co'] = function(block) {\n  var code = 'layer=CO,';\n  return code;\n};\nBlockly.JavaScript['layer_o3'] = function(block) {\n  var code = 'layer=O3,';\n  return code;\n};\n\n\n//Civilización\nBlockly.JavaScript['layer_den'] = function(block) {\n  var code = 'layer=DEN,';\n  return code;\n};\nBlockly.JavaScript['layer_light'] = function(block) {\n  var code = 'layer=LIGHT,';\n  return code;\n};\nBlockly.JavaScript['layer_human'] = function(block) {\n  var code = 'layer=HUMAN,';\n  return code;\n};\n\n\n//Special\nBlockly.JavaScript['transparency_level'] = function(block) {\n  var value = block.getFieldValue('transparency');\n  var code = 'layer_opacity=' + value + ',';\n  return code;\n};","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TSpacePage } from './t-space.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TSpacePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TSpacePageRoutingModule {}\n","import {  Component, OnInit  } from '@angular/core';\nimport * as Blockly from 'blockly/core';\nimport 'src/app/members/teacher/Components/blck-t /blockeado-t.js';\nimport 'node_modules/blockly/blockly_compressed.js';\nimport \"node_modules/blockly/javascript_compressed.js\";\nimport { DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport { TMapService } from 'src/app/members/teacher/Services/t-map.service';\nimport { LoadingService } from 'src/app/services/loading/loading.service';\n@Component({\n  selector: 'app-blck-t',\n  templateUrl: './blck-t.component.html',\n  styleUrls: ['./blck-t.component.scss'],\n})\n\nexport class BlckTComponent implements OnInit {\n  primaryWorkspace: Blockly.WorkspaceSvg;\n  GEE = \"PCFET0NUWVBFIGh0bWw+Cgo8aGVhZD4KPG1ldGEgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04IiBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiLz4KPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVM9ZmFsc2U7IExfTk9fVE9VQ0g9ZmFsc2U7IExfRElTQUJMRV8zRD1mYWxzZTs8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vbGVhZmxldEAxLjQuMC9kaXN0L2xlYWZsZXQuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTEuMTIuNC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5qcyI+PC9zY3JpcHQ+CjxsaW5rIGhyZWY9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vbGVhZmxldEAxLjQuMC9kaXN0L2xlYWZsZXQuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9mb250LWF3ZXNvbWUvNC42LjMvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9yYXdjZG4uZ2l0aGFjay5jb20vcHl0aG9uLXZpc3VhbGl6YXRpb24vZm9saXVtL21hc3Rlci9mb2xpdW0vdGVtcGxhdGVzL2xlYWZsZXQuYXdlc29tZS5yb3RhdGUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KPHN0eWxlPiNtYXAge3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO3JpZ2h0OjA7bGVmdDowO308L3N0eWxlPgo8bWV0YSBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsCiAgICAgICAgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vIiBuYW1lPSJ2aWV3cG9ydCIvPgo8c3R5bGU+I21hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCB7CiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgIHdpZHRoOiAxMDAuMCU7CiAgICAgICAgaGVpZ2h0OiAxMDAuMCU7CiAgICAgICAgbGVmdDogMC4wJTsKICAgICAgICB0b3A6IDAuMCU7CiAgICAgICAgfQogICAgPC9zdHlsZT4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xlYWZsZXQuZnVsbHNjcmVlbi8xLjQuMi9Db250cm9sLkZ1bGxTY3JlZW4ubWluLmpzIj48L3NjcmlwdD4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGVhZmxldC5mdWxsc2NyZWVuLzEuNC4yL0NvbnRyb2wuRnVsbFNjcmVlbi5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPC9oZWFkPgo8Ym9keT4KPGRpdiBjbGFzcz0iZm9saXVtLW1hcCIgaWQ9Im1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCI+PC9kaXY+CjwvYm9keT4KPHNjcmlwdD4gICAgCiAgICAKICAgIAogICAgICAgIHZhciBib3VuZHMgPSBudWxsOwogICAgCgogICAgdmFyIG1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCA9IEwubWFwKAogICAgICAgICdtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQnLCB7CiAgICAgICAgY2VudGVyOiBbNDAuMTkyODAyODMyNDg5ODMsIC0zLjcwMjE0Mzc3MDA1MDcwMl0sCiAgICAgICAgem9vbTogNiwKICAgICAgICBtYXhCb3VuZHM6IGJvdW5kcywKICAgICAgICBsYXllcnM6IFtdLAogICAgICAgIHdvcmxkQ29weUp1bXA6IGZhbHNlLAogICAgICAgIGNyczogTC5DUlMuRVBTRzM4NTcsCiAgICAgICAgem9vbUNvbnRyb2w6IHRydWUsCiAgICAgICAgfSk7CkwuY29udHJvbC5zY2FsZSgpLmFkZFRvKG1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCk7CgogICAgCiAgICB2YXIgdGlsZV9sYXllcl8zZmJkZWJmYzU5YmY0NmNjYTg5NjgwYmQzN2Q1Y2U1ZiA9IEwudGlsZUxheWVyKAogICAgICAgICdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsCiAgICAgICAgewogICAgICAgICJhdHRyaWJ1dGlvbiI6IG51bGwsCiAgICAgICAgImRldGVjdFJldGluYSI6IGZhbHNlLAogICAgICAgICJtYXhOYXRpdmVab29tIjogMTgsCiAgICAgICAgIm1heFpvb20iOiAxOCwKICAgICAgICAibWluWm9vbSI6IDAsCiAgICAgICAgIm5vV3JhcCI6IGZhbHNlLAogICAgICAgICJvcGFjaXR5IjogMSwKICAgICAgICAic3ViZG9tYWlucyI6ICJhYmMiLAogICAgICAgICJ0bXMiOiBmYWxzZQp9KS5hZGRUbyhtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQpOwogICAgdmFyIHRpbGVfbGF5ZXJfNjcyOTcwZjU1OWZkNDcyZDk1OTBhNjk5MzdlMzI4YzggPSBMLnRpbGVMYXllcigKICAgICAgICAnaHR0cHM6Ly9tdDEuZ29vZ2xlLmNvbS92dC9seXJzPW0meD17eH0meT17eX0mej17en0nLAogICAgICAgIHsKICAgICAgICAiYXR0cmlidXRpb24iOiAiR29vZ2xlIiwKICAgICAgICAiZGV0ZWN0UmV0aW5hIjogZmFsc2UsCiAgICAgICAgIm1heE5hdGl2ZVpvb20iOiAxOCwKICAgICAgICAibWF4Wm9vbSI6IDE4LAogICAgICAgICJtaW5ab29tIjogMCwKICAgICAgICAibm9XcmFwIjogZmFsc2UsCiAgICAgICAgIm9wYWNpdHkiOiAxLAogICAgICAgICJzdWJkb21haW5zIjogImFiYyIsCiAgICAgICAgInRtcyI6IGZhbHNlCn0pLmFkZFRvKG1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCk7CiAgICB2YXIgdGlsZV9sYXllcl8wNDFlMDI2NzM2YmY0MjE1YTg5NjRiYWNhZWY0OGQ3MCA9IEwudGlsZUxheWVyKAogICAgICAgICdodHRwczovL210MS5nb29nbGUuY29tL3Z0L2x5cnM9cyZ4PXt4fSZ5PXt5fSZ6PXt6fScsCiAgICAgICAgewogICAgICAgICJhdHRyaWJ1dGlvbiI6ICJHb29nbGUiLAogICAgICAgICJkZXRlY3RSZXRpbmEiOiBmYWxzZSwKICAgICAgICAibWF4TmF0aXZlWm9vbSI6IDE4LAogICAgICAgICJtYXhab29tIjogMTgsCiAgICAgICAgIm1pblpvb20iOiAwLAogICAgICAgICJub1dyYXAiOiBmYWxzZSwKICAgICAgICAib3BhY2l0eSI6IDEsCiAgICAgICAgInN1YmRvbWFpbnMiOiAiYWJjIiwKICAgICAgICAidG1zIjogZmFsc2UKfSkuYWRkVG8obWFwXzIzZTNkODc5NDRiZDQ2ZDJhNzFmZTc0ODA5MjRjMTE0KTsKICAgIAogICAgICAgICAgICBMLmNvbnRyb2wuZnVsbHNjcmVlbih7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcGxlZnQnLAogICAgICAgICAgICAgICAgdGl0bGU6ICdGdWxsIFNjcmVlbicsCiAgICAgICAgICAgICAgICB0aXRsZUNhbmNlbDogJ0V4aXQgRnVsbCBTY3JlZW4nLAogICAgICAgICAgICAgICAgZm9yY2VTZXBhcmF0ZUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQpOwogICAgICAgICAgICBtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQub24oJ2VudGVyRnVsbHNjcmVlbicsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZW50ZXJlZCBmdWxsc2NyZWVuJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgbGF5ZXJfY29udHJvbF82M2Q5ZTQ4YWEzZTA0MjA4OGZlYjg2YzIzNmZhODg1NyA9IHsKICAgICAgICAgICAgICAgIGJhc2VfbGF5ZXJzIDogeyAib3BlbnN0cmVldG1hcCIgOiB0aWxlX2xheWVyXzNmYmRlYmZjNTliZjQ2Y2NhODk2ODBiZDM3ZDVjZTVmLCB9LAogICAgICAgICAgICAgICAgb3ZlcmxheXMgOiB7ICJHb29nbGUgTWFwcyIgOiB0aWxlX2xheWVyXzY3Mjk3MGY1NTlmZDQ3MmQ5NTkwYTY5OTM3ZTMyOGM4LCJHb29nbGUgU2F0ZWxsaXRlIiA6IHRpbGVfbGF5ZXJfMDQxZTAyNjczNmJmNDIxNWE4OTY0YmFjYWVmNDhkNzAsIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIEwuY29udHJvbC5sYXllcnMoCiAgICAgICAgICAgICAgICBsYXllcl9jb250cm9sXzYzZDllNDhhYTNlMDQyMDg4ZmViODZjMjM2ZmE4ODU3LmJhc2VfbGF5ZXJzLAogICAgICAgICAgICAgICAgbGF5ZXJfY29udHJvbF82M2Q5ZTQ4YWEzZTA0MjA4OGZlYjg2YzIzNmZhODg1Ny5vdmVybGF5cywKICAgICAgICAgICAgICAgIHtwb3NpdGlvbjogJ3RvcHJpZ2h0JywKICAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgYXV0b1pJbmRleDogdHJ1ZQogICAgICAgICAgICAgICAgfSkuYWRkVG8obWFwXzIzZTNkODc5NDRiZDQ2ZDJhNzFmZTc0ODA5MjRjMTE0KTsKICAgICAgICAgICAgCiAgICAgICAgCjwvc2NyaXB0Pg==\"; \n  \n  t_geeMap: SafeResourceUrl;\n  constructor(public sanitizer: DomSanitizer, public mapService: TMapService, private loading: LoadingService) {}\n\n  ngOnInit() {\n    this.primaryWorkspace = Blockly.inject('primaryDiv',{\n      readOnly: false,\n      move: {\n        scrollbars: false,\n        //drag: true,\n        //wheel: true\n      },\n      //zoom:{\n        //controls: true,\n        //wheel: true,\n        //startScale: 1.0,\n        //maxScale: 3,\n        //minScale: 0.3,\n        //scaleSpeed: 1.2,\n        //pinch: true\n      //},\n\t    collapse : true, \n      renderer: 'thrasos',\n\t    comments : true, \n\t    disable : true, \n\t    maxBlocks : 10, \n\t    trashcan : true, \n\t    horizontalLayout : false, \n\t    toolboxPosition : 'start', \n\t    scss : true, \n\t    media : 'https://unpkg.com/blockly/media/', \n\t    rtl : false, \n\t    sounds : true, \n\t    oneBasedIndex : true,\n      toolbox: `\n      <xml xmlns=\"https://developers.google.com/blockly/xml\" id=\"toolbox\" style=\"display: none\">\n  <category name=\"Lugares\" colour=\"#5ba58c\">\n    <category name=\"Territorios\" colour=\"#5ba58c\">\n      <block type=\"buscar_pais\">\n        <field name=\"input1\">Escribe el país</field>\n        <field name=\"INPUT\">paises</field>\n      </block>\n      <block type=\"buscar_regiones\">\n        <field name=\"input1\">Escribe la región</field>\n        <field name=\"INPUT\">regiones</field>\n      </block>\n      <block type=\"buscar_provincia\">\n        <field name=\"input1\">Escribe la provincia</field>\n        <field name=\"INPUT\">provincias</field>\n      </block>\n    </category>\n    <category name=\"Mares y océanos \" colour=\"#F6EFA6\">\n      <block type=\"buscar_oceano\">\n        <field name=\"input1\">Regiones grandes</field>\n        <field name=\"INPUT\">agua</field>\n      </block>\n      <block type=\"buscar_seas\">\n        <field name=\"input1\">Regiones pequeñas</field>\n        <field name=\"INPUT\">agua</field>\n      </block>\n    </category>\n  </category>\n  <category name=\"Vegetación\" colour=\"#0DF013\">\n    <block type=\"layer_tree\">\n    <field name=\"TREE\">Árboles</field>\n    </block>\n    <block type=\"layer_ndvi\">\n    <field name=\"NDVI\">Cantidad de vegetación</field>\n    </block>\n    <block type=\"layer_fires\">\n    <field name=\"FIRES\">incendios</field>\n    </block>\n    <block type=\"layer_tree_loss\">\n    <field name=\"TREE_LOSS\">Pérdida de árboles</field>\n    </block>\n    <block type=\"layer_gcvi\">\n    <field name=\"GCVI\">Salud de Vegetación</field>\n    </block>\n  </category>\n  <category name=\"Suelo\" colour=\"#D25F00\">\n    <block type=\"layer_ndmi\">\n    <field name=\"NDMI\">Humedad del suelo</field>\n    </block>\n    <block type=\"layer_alt\">\n    <field name=\"ALT\">Relieve</field>\n    </block>\n    <block type=\"layer_cover\">\n    <field name=\"COVER\">Tipo de suelo</field>\n    </block>\n    <block type=\"layer_landforms\">\n    <field name=\"LANDFORMS\">Tipos de relieve</field>\n    </block>\n  </category>\n  <category name=\"Atmósfera\" colour=\"#ACF5E3\">\n    <block type=\"layer_tot_prep\">\n    <field name=\"TOT_PREP\">Lluvias</field>\n    </block>\n    <block type=\"layer_cloud\">\n    <field name=\"CLOUD\">Nubes</field>\n    </block>\n    <block type=\"layer_surf_press\">\n    <field name=\"SURF_PRESS\">Presión atmosférica</field>\n    </block>\n    <block type=\"layer_dewp_temp\">\n    <field name=\"DEWP_TEMP\">Temperatura de formación de niebla</field>\n    </block>\n    <block type=\"layer_air_temp\">\n    <field name=\"AIR_TEMP\">Temperatura del aire</field>\n    </block>\n    <block type=\"layer_10m_wind\">\n    <field name=\"10M_WIND\">Viento</field>\n    </block>\n  </category>\n  <category name=\"Agua\" colour=\"#00A6FB\">\n    <block type=\"layer_ndwi\">\n    <field name=\"NDWI\">Lagos</field>\n    </block>\n    <block type=\"layer_sea_press\">\n    <field name=\"SEA_PRESS\">Presión a nivel del mar</field>\n    </block>\n    <block type=\"layer_sea_temp\">\n    <field name=\"SEA_TEMP\">Temperatura del agua</field>\n    </block>\n    <block type=\"layer_river\">\n    <field name=\"RIVER\">Ríos</field>\n    </block>\n  </category>\n  <category name=\"Gases\" colour=\"#FFF671\">\n    <block type=\"layer_aer_ai\">\n    <field name=\"AER_AI\">Aerosoles</field>\n    </block>\n    <block type=\"layer_so2\">\n    <field name=\"SO2\">Dióxido de azufre</field>\n    </block>\n    <block type=\"layer_no2\">\n    <field name=\"NO2\">Dióxido de nitrógeno</field>\n    </block>\n    <block type=\"layer_hcho\">\n    <field name=\"HCHO\">Metanal</field>\n    </block>\n    <block type=\"layer_ch4\">\n    <field name=\"CH4\">Metano</field>\n    </block>\n    <block type=\"layer_co\">\n    <field name=\"CO\">Monóxido de carbono</field>\n    </block>\n    <block type=\"layer_o3\">\n    <field name=\"O3\">Ozono</field>\n    </block>\n  </category>\n  <category name=\"Civilización\" colour=\"#B5B5B5\">\n    <block type=\"layer_den\">\n    <field name=\"DEN\">Densidad de población</field>\n    </block>\n    <block type=\"layer_light\">\n    <field name=\"LIGHT\">Luces nocturnas</field>\n    </block>\n    <block type=\"layer_human\">\n    <field name=\"HUMAN\">Modificado por el humano</field>\n    </block>\n  </category>\n  <sep></sep>\n  <category name=\"Especiales\" colour=\"#FF7AE2\">\n    <block type=\"transparency_level\">\n    <field name=\"transparency\"></field>\n    </block>\n    </category>\n</xml>\n      `\n    } as Blockly.BlocklyOptions);\n    \n    //cCreates de src that has to be in the iframe. What I need to do is to update this safeResourceUrl.\n    this.t_geeMap = this.sanitizer.bypassSecurityTrustResourceUrl(`data:text/html;base64,${this.GEE}`);\n\n\n    this.primaryWorkspace.addChangeListener((primaryEvent)=> {\n      if (Blockly.Events.CHANGE === primaryEvent.type || Blockly.Events.CREATE === primaryEvent.type)\n      {  \n        //Look for the code in the wotkspace\n        var code =(Blockly as any).JavaScript.workspaceToCode(this.primaryWorkspace)\n        //split it to differenciate from country, region and province\n        var split_code= code.split(',')\n        //create three differents variables with each option\n        var code_country= split_code[0]+',';\n        var code_region= split_code[1]+',';\n        var code_province= split_code[2]+',';\n        //Due to a strange split creation. The last code to add is the first, we need to check wether if the codes are the one we want.\n        var regionTrue = code_region.startsWith(\"region=\");\n        var countryTrue = code_country.startsWith(\"country=\");\n        //when code_country references to a region.\n        var falseCountry = code_country.startsWith(\"region=\");\n\n        //console.log evertything. Onces we fixed the problem it was commented\n        //console.log('country: '+code_country)\n        //console.log(falseCountry)\n        //console.log('region: '+code_region)\n        //console.log(regionTrue)\n        //console.log('province: '+code_province)\n        \n        //If country_code is a country, use it for the regions.\n        if(countryTrue ==true){\n          this.mapService.getRegion(code_country)\n              .subscribe(block =>{\n            var listReg=block\n            console.log(\"Regiones-->\",listReg)\n            localStorage.setItem('listRegTeach', listReg);\n            }\n          )\n          this.mapService.getLatinRegion(code_country)\n              .subscribe(block =>{\n            var listLatinReg=block\n            console.log(\"Regiones Latín-->\",listLatinReg)\n            localStorage.setItem('listLatinRegTeach', listLatinReg);\n            }\n          )\n        }\n        //If region_code is a region, look for the provinces.\n        if (regionTrue==true){\n          this.mapService.getProvince(code_region)\n              .subscribe(block =>{\n            var listProv=block\n            console.log(\"Provincias-->\",listProv)\n            localStorage.setItem('listProvTeach', listProv);\n            }\n          )\n          this.mapService.getLatinProvince(code_region)\n              .subscribe(block =>{\n            var listLatinProv=block\n            console.log(\"Provincias Latín-->\",listLatinProv)\n            localStorage.setItem('listLatinProvTeach', listLatinProv);\n            }\n          )\n        }\n        //The last option that happens is that country_code is a region. If that happens, use it for provinces.\n        if(falseCountry==true) {\n          this.mapService.getProvince(code_country)\n              .subscribe(block =>{\n            var listProv=block\n            console.log(\"Provincias-->\",listProv)\n            localStorage.setItem('listProvTeach', listProv);\n            }\n          )\n          this.mapService.getLatinProvince(code_country)\n              .subscribe(block =>{\n            var listLatinProv=block\n            console.log(\"Provincias Latín-->\",listLatinProv)\n            localStorage.setItem('listLatinProvTeach', listLatinProv);\n            }\n          )\n        }\n      }\n      \n    }\n    ) \n\n    //Disable the blocks that are not joined with the main block\n    this.primaryWorkspace.addChangeListener(Blockly.Events.disableOrphans);\n  }\n   \n  async  stepCode(){\n        //Run the map-loading function until it takes the map.\n        this.loading.mapLoading();\n        //Extract the code from the main blocks in the workspace by creating a root Block and asigning it the rest.\n        var rootBlock = null;\n        //Select the blocks that are in the top without sorting them.\n        var blocks = this.primaryWorkspace.getTopBlocks(false);\n        for (var i = 0, block; block = blocks[i]; i++) {\n          //Select which ones are going to be those main blocks\n         if (block.type == 'buscar_pais' || block.type == 'buscar_oceano' ||block.type == 'buscar_seas') {\n           rootBlock = block;\n          }\n        }\n        //Take the code from the rootBlocks. The ones that are connected.\n        var code = (Blockly as any).JavaScript.blockToCode(rootBlock);\n    //Calls the server with all the necessary parameters in order\n    this.mapService.getMap(code)\n      .subscribe(map =>{\n        console.log(map)\n        this.t_geeMap = this.sanitizer.bypassSecurityTrustResourceUrl(`data:text/html;base64,${map}`);\n        //Finish map loading function\n        this.loading.dustyLoading.dismiss();\n        //Log the code from the blocks.\n        console.log(code);\n      },\n      _error => {\n        setTimeout(()=>{\n        //Finish map loading function\n        this.loading.dustyLoading.dismiss();\n        //Give an alert message \n        alert('Parece que Dusty no ha encontrado lo que estabas buscando...')\n        //Set finish time to 1 sec after the error has happend.\n      },1000)}\n    ); \n  }\n}\n","//-------------------------------------//\n//Importación de librerías necesarias. Blockly con todo y Javascript para hacer código js (Seguramente cambiaremos a Python!!!!!!!!) \n\nimport * as Blockly from 'blockly';\nimport \"node_modules/blockly/javascript_compressed.js\";\n\n//-------------------------------------//\n//Definición de ls bloques mediante un array de JSON\n\nBlockly.defineBlocksWithJsonArray([\n  {\n    \"type\": \"buscar_pais\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"input1\",\n        \"text\": \"Escribe el país\",\n      },\n      {\n        \"type\": \"input_dummy\",\n        \"name\": \"INPUT\",\n        \"text\": \"paises\",\n      }\n    ],\n    \"nextStatement\": [\n    \"country-layer\",\n    \"country-date\",\n    \"country-addition\",\n    \"country-region\"\n  ],\n  \"extensions\": [\"teacher_dynamic\"],\n  \"colour\": 315\n  },\n\n  {\n    \"type\": \"buscar_regiones\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"input1\",\n        \"text\": \"Escribe la región\",\n      },\n      {\n        \"type\": \"input_dummy\",\n        \"name\": \"INPUT\",\n        \"text\": \"regiones\",\n      }\n    ],\n    \"previousStatement\": \"country-region\",\n    \"nextStatement\": [\n      \"region-layer\",\n      \"region-date\",\n      \"region-addition\",\n      \"region-city\"\n  ],\n  \"extensions\": [\"dynamic_menu_extension2\"],\n  \"colour\": 180\n  },\n\n  {\n    \"type\": \"buscar_provincia\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"input1\",\n        \"text\": \"Escribe la provincia\",\n      },\n      {\n        \"type\": \"input_dummy\",\n        \"name\": \"INPUT\",\n        \"text\": \"provincias\",\n      }\n    ],\n    \"previousStatement\": \"region-city\",\n    \"nextStatement\": [\n      \"city-layer\",\n      \"city-date\",\n      \"city-addition\"\n  ],\n  \"extensions\": [\"dynamic_menu_extension3\"],\n  \"colour\": 127\n},\n//OCEANS\n{\n  \"type\": \"buscar_oceano\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\": \"field_input\",\n      \"name\": \"input1\",\n      \"text\": \"Escribe la región marina\",\n    },\n    {\n      \"type\": \"input_dummy\",\n      \"name\": \"INPUT\",\n      \"text\": \"agua\",\n    }\n  ],\n  \"nextStatement\": [\n  \"country-layer\",\n  \"country-date\",\n  \"country-addition\",\n  \"country-region\"\n],\n\"extensions\": [\"big_water_dynamic_teacher\"],\n\"colour\": 210\n},\n\n{\n  \"type\": \"buscar_seas\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\": \"field_input\",\n      \"name\": \"input1\",\n      \"text\": \"Escribe la región marina\",\n    },\n    {\n      \"type\": \"input_dummy\",\n      \"name\": \"INPUT\",\n      \"text\": \"agua\",\n    }\n  ],\n  \"nextStatement\": [\n  \"country-layer\",\n  \"country-date\",\n  \"country-addition\",\n  \"country-region\"\n],\n\"extensions\": [\"big_mares_dynamic_teacher\"],\n\"colour\": 280\n},\n\n\n//Vegetación\n{\n  \"type\": \"layer_tree\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/125/125215.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"TREE\",\n      \"text\": \"Árboles\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 90,\n},\n{\n  \"type\": \"layer_ndvi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/128/128818.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NDVI\",\n      \"text\": \"Cantidad de vegetación\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 100,\n},\n{\n  \"type\": \"layer_fires\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/114/114466.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"FIRES\",\n      \"text\": \"incendios\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 110,\n},\n{\n  \"type\": \"layer_tree_loss\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/98/98442.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"TREE_LOSS\",\n      \"text\": \"Pérdida de árboles\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 120,\n},\n{\n  \"type\": \"layer_gcvi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/125/125203.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"GCVI\",\n      \"text\": \"Salud de Vegetación\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 130,\n}, \n\n\n\n//Suelo\n{\n  \"type\": \"layer_ndmi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/31/31655.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NDMI\",\n      \"text\": \"Humedad del suelo\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 0,\n},\n{\n  \"type\": \"layer_alt\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/120/120198.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"ALT\",\n      \"text\": \"Relieve\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 10,\n},\n{\n  \"type\": \"layer_cover\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/15/15719.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"COVER\",\n      \"text\": \"Tipo de suelo\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 20,\n},\n{\n  \"type\": \"layer_landforms\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/93/93678.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"LANDFORMS\",\n      \"text\": \"Tipos de relieve\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 30,\n},\n\n\n\n//Atmósfera\n{\n  \"type\": \"layer_tot_prep\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/116/116257.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"TOT_PREP\",\n      \"text\": \"Lluvias\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 165,\n},\n{\n  \"type\": \"layer_cloud\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/128/128853.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"CLOUD\",\n      \"text\": \"Nubes\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 168,\n},\n{\n  \"type\": \"layer_surf_press\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/119/119487.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SURF_PRESS\",\n      \"text\": \"Presión\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 171,\n},\n{\n  \"type\": \"layer_dewp_temp\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/12/12209.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"DEWP_TEMP\",\n      \"text\": \"Temperatura para niebla\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 174,\n},\n{\n  \"type\": \"layer_air_temp\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/120/120780.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"AIR_TEMP\",\n      \"text\": \"Temperatura del aire\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 177,\n},\n{\n  \"type\": \"layer_10m_wind\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/116/116720.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"10M_WIND\",\n      \"text\": \"Viento\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 180,\n},\n\n\n\n//Agua\n{\n  \"type\": \"layer_ndwi\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/102/102438.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NDWI\",\n      \"text\": \"Lagos\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 210,\n},\n{\n  \"type\": \"layer_sea_press\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/119/119487.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SEA_PRESS\",\n      \"text\": \"Presión en el mar\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 220,\n},\n{\n  \"type\": \"layer_sea_temp\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/120/120779.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SEA_TEMP\",\n      \"text\": \"Temperatura del mar\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 230,\n},\n{\n  \"type\": \"layer_river\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/102/102444.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"RIVER\",\n      \"text\": \"Ríos\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 240,\n},\n\n\n\n//Gases\n{\n  \"type\": \"layer_aer_ai\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/104/104960.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"AER_AI\",\n      \"text\": \"Aerosoles\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 60,\n},\n{\n  \"type\": \"layer_so2\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/108/108256.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"SO2\",\n      \"text\": \"Dióxido de azufre\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 62.5,\n},\n{\n  \"type\": \"layer_no2\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/70/70927.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"NO2\",\n      \"text\": \"Dióxido de nitrógeno\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 65.0,\n},\n{\n  \"type\": \"layer_hcho\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/61/61294.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"HCHO\",\n      \"text\": \"Metanal\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 67.5,\n},\n{\n  \"type\": \"layer_ch4\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/102/102880.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"CH4\",\n      \"text\": \"Metano\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 70.0,\n},\n{\n  \"type\": \"layer_co\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/130/130068.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"CO\",\n      \"text\": \"Monóxido de carbono\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 72.5,\n},\n{\n  \"type\": \"layer_o3\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/103/103678.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"O3\",\n      \"text\": \"Ozono\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": 75.0,\n},\n\n\n\n//Civilización\n{\n  \"type\": \"layer_den\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/33/33887.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"DEN\",\n      \"text\": \"Densidad de población\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": \"#D1D1D1\",\n},\n{\n  \"type\": \"layer_light\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/113/113742.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"LIGHT\",\n      \"text\": \"Luces nocturnas\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": \"#C3C3C3\",\n},\n{\n  \"type\": \"layer_human\",\n  \"message0\": \"%1 %2\",\n  \"args0\": [\n    {\n      \"type\":  \"field_image\",\n      \"src\": \"https://image.flaticon.com/icons/png/512/129/129863.png\",\n      \"width\": 15,\n      \"height\": 15,\n      \"alt\": \"*\",\n      \"flipRtl\": false\n    },\n    {\n      \"type\": \"field_label_serializable\",\n      \"name\": \"HUMAN\",\n      \"text\": \"Modificado por el humano\"\n    }\n  ],\n  \"previousStatement\": [\n   \"country-layer\",\n   \"region-layer\",\n   \"city-layer\",\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"nextStatement\": [\n   \"layer-date\",\n   \"addition-layer\"\n  ],\n  \"colour\": \"#ACACAC\",\n},\n\n\n//Specials\n{\n  \"type\": \"transparency_level\",\n  \"message0\": \"Nivel de transparencia %1\",\n  \"args0\": [\n    {\n      \"type\": \"field_dropdown\",\n      \"name\": \"transparency\",\n      \"options\": [\n        [\n          \"Bajo\",\n          \"0.75\"\n        ],\n        [\n          \"Medio\",\n          \"0.5\"\n        ],\n        [\n          \"Alto\",\n          \"0.3\"\n        ],\n        [\n          \"Nada\",\n          \"1\"\n        ]\n      ]\n    }\n  ],\n  \"previousStatement\": [\n  \"layer-date\"\n],\n  \"nextStatement\": [\n  \"layer-date\"\n],\n  \"colour\": \"#CF71BB\",\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n}\n]);\n\n\n\n//-------------------------------------//\n//La suma de capas tiene un propio código que tengo que estudiar jeje\n\n\nvar list=[[\"Afganistán\",\"Afghanistan\"],[\"Albania\",\"Albania\"],[\"Argelia\",\"Algeria\"],[\"Andorra\",\"Andorra\"],[\"Angola\",\"Angola\"],[\"Antigua y Barbuda\",\"Antigua and Barbuda\"],[\"Argentina\",\"Argentina\"],[\"Armenia\",\"Armenia\"],[\"Australia\",\"Australia\"],[\"Austria\",\"Austria\"],[\"Azerbaiyán\",\"Azerbaijan\"],[\"Bahamas\",\"Bahamas\"],[\"Bahrein\",\"Bahrain\"],[\"Bangladesh\",\"Bangladesh\"],[\"Barbados\",\"Barbados\"],[\"Bielorrusia\",\"Belarus\"],[\"Bélgica\",\"Belgium\"],[\"Belice\",\"Belize\"],[\"Benin\",\"Benin\"],[\"Bután\",\"Bhutan\"],[\"Bolivia\",\"Bolivia\"],[\"Bosnia y Herzegovina\",\"Bosnia and Herzegovina\"],[\"Botsuana\",\"Botswana\"],[\"Brasil\",\"Brazil\"],[\"Brunei Darussalam\",\"Brunei Darussalam\"],[\"Bulgaria\",\"Bulgaria\"],[\"Burkina Faso\",\"Burkina Faso\"],[\"Burundi\",\"Burundi\"],[\"Cabo Verde\",\"Cabo Verde\"],[\"Camboya\",\"Cambodia\"],[\"Camerún\",\"Cameroon\"],[\"Canadá\",\"Canada\"],[\"República Centroafricana\",\"Central African Republic\"],[\"Chad\",\"Chad\"],[\"Chile\",\"Chile\"],[\"China\",\"China\"],[\"Colombia\",\"Colombia\"],[\"Comoras\",\"Comoros\"],[\"Congo\",\"Congo\"],[\"Islas Cook\",\"Cook Islands\"],[\"Costa Rica\",\"Costa Rica\"],[\"Croacia\",\"Croatia\"],[\"Cuba\",\"Cuba\"],[\"Chipre\",\"Cyprus\"],[\"Chequia\",\"Czech Republic\"],[\"Costa de Marfil\",\"C�te d'Ivoire\"],[\"Corea del Norte\",\"Dem People's Rep of Korea\"],[\"República Democrática del Congo\",\"Democratic Republic of the Congo\"],[\"Dinamarca\",\"Denmark\"],[\"Djibouti\",\"Djibouti\"],[\"Dominica\",\"Dominica\"],[\"República Dominicana\",\"Dominican Republic\"],[\"Ecuador\",\"Ecuador\"],[\"Egipto\",\"Egypt\"],[\"El Salvador\",\"El Salvador\"],[\"Guinea Ecuatorial\",\"Equatorial Guinea\"],[\"Eritrea\",\"Eritrea\"],[\"Estonia\",\"Estonia\"],[\"Esuatini\",\"Eswatini\"],[\"Etiopía\",\"Ethiopia\"],[\"Islas Faroe\",\"Faroe Islands\"],[\"Fiji\",\"Fiji\"],[\"Finlandia\",\"Finland\"],[\"Francia\",\"France\"],[\"Gabón\",\"Gabon\"],[\"Gambia\",\"Gambia\"],[\"Georgia\",\"Georgia\"],[\"Alemania\",\"Germany\"],[\"Ghana\",\"Ghana\"],[\"Grecia\",\"Greece\"],[\"Granada\",\"Grenada\"],[\"Guatemala\",\"Guatemala\"],[\"Guinea\",\"Guinea\"],[\"Guinea-Bissau\",\"Guinea-Bissau\"],[\"Guayana\",\"Guyana\"],[\"Haití\",\"Haiti\"],[\"Honduras\",\"Honduras\"],[\"Hungría\",\"Hungary\"],[\"Islandia\",\"Iceland\"],[\"India\",\"India\"],[\"Indonesia\",\"Indonesia\"],[\"Irán\",\"Iran (Islamic Republic of)\"],[\"Irak\",\"Iraq\"],[\"Irlanda\",\"Ireland\"],[\"Israel\",\"Israel\"],[\"Italia\",\"Italy\"],[\"Jamaica\",\"Jamaica\"],[\"Japón\",\"Japan\"],[\"Jordania\",\"Jordan\"],[\"Kazajstán\",\"Kazakhstan\"],[\"Kenia\",\"Kenya\"],[\"Kiribati\",\"Kiribati\"],[\"Kuwait\",\"Kuwait\"],[\"Kirguistán\",\"Kyrgyzstan\"],[\"República Democrática Popular de Lao\",\"Lao People's Democratic Republic\"],[\"Letonia\",\"Latvia\"],[\"Líbano\",\"Lebanon\"],[\"Lesoto\",\"Lesotho\"],[\"Liberia\",\"Liberia\"],[\"Libia\",\"Libya\"],[\"Lituania\",\"Lithuania\"],[\"Luxemburgo\",\"Luxembourg\"],[\"Madagascar\",\"Madagascar\"],[\"Malawi\",\"Malawi\"],[\"Malasia\",\"Malaysia\"],[\"Maldivas\",\"Maldives\"],[\"Mali\",\"Mali\"],[\"Malta\",\"Malta\"],[\"Islas Marshall\",\"Marshall Islands\"],[\"Mauritania\",\"Mauritania\"],[\"Mauricio\",\"Mauritius\"],[\"México\",\"Mexico\"],[\"Micronesia\",\"Micronesia (Federated States of)\"],[\"Mónaco\",\"Monaco\"],[\"Mongolia\",\"Mongolia\"],[\"Montenegro\",\"Montenegro\"],[\"Marruecos\",\"Morocco\"],[\"Mozambique\",\"Mozambique\"],[\"Myanmar\",\"Myanmar\"],[\"Namibia\",\"Namibia\"],[\"Nauru\",\"Nauru\"],[\"Nepal\",\"Nepal\"],[\"Países Bajos\",\"Netherlands\"],[\"Nueva Zelanda\",\"New Zealand\"],[\"Nicaragua\",\"Nicaragua\"],[\"Níger\",\"Niger\"],[\"Nigeria\",\"Nigeria\"],[\"Niue\",\"Niue\"],[\"Macedonia del Norte\",\"North Macedonia\"],[\"Noruega\",\"Norway\"],[\"Omán\",\"Oman\"],[\"Pakistán\",\"Pakistan\"],[\"Palau\",\"Palau\"],[\"Panamá\",\"Panama\"],[\"Papúa Nueva Guinea\",\"Papua New Guinea\"],[\"Paraguay\",\"Paraguay\"],[\"Perú\",\"Peru\"],[\"Filipinas\",\"Philippines\"],[\"Polonia\",\"Poland\"],[\"Portugal\",\"Portugal\"],[\"Katar\",\"Qatar\"],[\"República de Corea\",\"Republic of Korea\"],[\"República de Moldavia\",\"Republic of Moldova\"],[\"Rumanía\",\"Romania\"],[\"Rusia\",\"Russian Federation\"],[\"Ruanda\",\"Rwanda\"],[\"Saint Kitts y Nevis\",\"Saint Kitts and Nevis\"],[\"Santa Lucía\",\"Saint Lucia\"],[\"San Vicente y las Granadinas\",\"Saint Vincent and the Grenadines\"],[\"Samoa\",\"Samoa\"],[\"San Marino\",\"San Marino\"],[\"Santo Tomé y Príncipe\",\"Sao Tome and Principe\"],[\"Arabia Saudita\",\"Saudi Arabia\"],[\"Senegal\",\"Senegal\"],[\"Serbia\",\"Serbia\"],[\"Seychelles\",\"Seychelles\"],[\"Sierra Leona\",\"Sierra Leone\"],[\"Singapur\",\"Singapore\"],[\"Eslovaquia\",\"Slovakia\"],[\"Eslovenia\",\"Slovenia\"],[\"Islas Salomón\",\"Solomon Islands\"],[\"Somalia\",\"Somalia\"],[\"Sudáfrica\",\"South Africa\"],[\"Sudán del Sur\",\"South Sudan\"],[\"España\",\"Spain\"],[\"Sri Lanka\",\"Sri Lanka\"],[\"Sudán\",\"Sudan\"],[\"Suriname\",\"Suriname\"],[\"Suecia\",\"Sweden\"],[\"Suiza\",\"Switzerland\"],[\"República Árabe Siria\",\"Syrian Arab Republic\"],[\"Tayikistán\",\"Tajikistan\"],[\"Tailandia\",\"Thailand\"],[\"Timor-Leste\",\"Timor-Leste\"],[\"Togo\",\"Togo\"],[\"Tokelau\",\"Tokelau\"],[\"Tonga\",\"Tonga\"],[\"Trinidad y Tobago\",\"Trinidad and Tobago\"],[\"Túnez\",\"Tunisia\"],[\"Turquía\",\"Turkey\"],[\"Turkmenistán\",\"Turkmenistan\"],[\"Tuvalu\",\"Tuvalu\"],[\"Uganda\",\"Uganda\"],[\"Ucrania\",\"Ukraine\"],[\"Emiratos Árabes Unidos\",\"United Arab Emirates\"],[\"Reino Unido\",\"U.K. of Great Britain and Northern Ireland\"],[\"República Unida de Tanzania\",\"United Republic of Tanzania\"],[\"Estados Unidos de América\",\"United States of America\"],[\"Uruguay\",\"Uruguay\"],[\"Uzbekistán\",\"Uzbekistan\"],[\"Vanuatu\",\"Vanuatu\"],[\"Venezuela\",\"Venezuela (Bolivarian Republic of)\"],[\"Vietnam\",\"Viet Nam\"],[\"Yemen\",\"Yemen\"],[\"Zambia\",\"Zambia\"],[\"Zimbabue\",\"Zimbabwe\"]];\nBlockly.Extensions.register('teacher_dynamic',\n  function() {\n    this.getInput('INPUT')\n      .appendField(new Blockly.FieldDropdown(\n        function() {\n          var options = [];\n          var coincidence = [];\n          var searchVal = \"españa\";\n          var block = this.getSourceBlock();\n          for (var i=0 ; i < list.length ; i++)\n        {\n          options.push([list[i][0],list[i][1]]);\n        }\n          if (block){\n            searchVal = block.getFieldValue('input1');\n          }\n          for (var j=0 ; j < list.length ; j++)\n        {\n          if (list[j][0].toLowerCase().includes(searchVal.toLowerCase())){\n            coincidence.push([list[j][0],list[j][1]]);\n          }\n          if (coincidence.length > 0){\n             options = coincidence;\n          }\n        }\n          return options;\n        }\n      ), 'country'\n    );\n  }\n);\n\nBlockly.JavaScript['buscar_pais'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'country=' + dropdown_value + ',';\n  return code;\n};\n\n\n\nBlockly.Extensions.register('dynamic_menu_extension2',\n      function() {\n        this.getInput('INPUT')\n          .appendField(new Blockly.FieldDropdown(\n            function() {\n              var listRaw=localStorage.getItem('listRegTeach');\n              var listLatinRaw=localStorage.getItem('listLatinRegTeach');\n              if (listRaw==null && listLatinRaw==null){\n                var listReg=[\"\"]\n                var listLatinReg=[\"\"]\n              }\n              else if (listRaw==null ){\n                var listReg=[\"\"]\n                var listLatinReg=[\"\"]\n              }\n              else if (listLatinRaw==null){\n                var listReg=[\"\"]\n                var listLatinReg=[\"\"]\n              }\n              else if (listLatinRaw==\"None\"){\n                var listReg=listRaw.split([\", \"])\n                var listLatinReg=listRaw.split([\", \"])\n              }\n              else{\n                var listReg=listRaw.split([\", \"])\n                var listLatinReg=listLatinRaw.split([\", \"])\n              }\n              var options = [];\n              var coincidence = [];\n              var searchVal = listReg[0];\n              var block = this.getSourceBlock();\n              for (var i=0 ; i < listReg.length ; i++)\n            {\n              options.push([listLatinReg[i],listReg[i]]);\n            }\n              if (block){\n                searchVal = block.getFieldValue('input1');\n              }\n              for (var j=0 ; j < listReg.length ; j++)\n            {\n              if (listReg[j].toLowerCase().includes(searchVal.toLowerCase())){\n                coincidence.push([listLatinReg[j],listReg[j]]);\n              }\n              if (coincidence.length > 0){\n                 options = coincidence;\n              }\n            }\n              return options;\n            }), 'region');\n      });\n\nBlockly.JavaScript['buscar_regiones'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'region=' + dropdown_value + ',';\n  return code;\n};\n\nBlockly.Extensions.register('dynamic_menu_extension3',\nfunction() {\n  this.getInput('INPUT')\n    .appendField(new Blockly.FieldDropdown(\n      function() {\n        var listRaw=localStorage.getItem('listProvTeach');\n        var listLatinRaw=localStorage.getItem('listLatinProvTeach');\n        if (listRaw==null && listLatinRaw==null){\n          var listProv=[\"\"]\n          var listLatinProv=[\" \"]\n        }\n        else if (listRaw==null ){\n          var listProv=[\"\"]\n          var listLatinProv=[\" \"]\n        }\n        else if (listLatinRaw==null ){\n          var listProv=[\"\"]\n          var listLatinProv=[\" \"]\n        }\n        else if (listLatinRaw==\"None\"){\n          var listProv=listRaw.split([\", \"])\n          var listLatinProv=listRaw.split([\", \"])\n        }\n        else{\n          var listProv=listRaw.split([\", \"])\n          var listLatinProv=listLatinRaw.split([\", \"])\n        }\n        var options = [];\n        var coincidence = [];\n        var searchVal = listProv[0];\n        var block = this.getSourceBlock();\n        for (var i=0 ; i < listProv.length ; i++)\n      {\n        options.push([listLatinProv[i],listProv[i]]);\n      }\n        if (block){\n          searchVal = block.getFieldValue('input1');\n        }\n        for (var j=0 ; j < listProv.length ; j++)\n      {\n        if (listProv[j].toLowerCase().includes(searchVal.toLowerCase())){\n          coincidence.push([listLatinProv[j],listProv[j]]);\n        }\n        if (coincidence.length > 0){\n           options = coincidence;\n        }\n      }\n        return options;\n      }), 'province');\n});\n\nBlockly.JavaScript['buscar_provincia'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'province=' + dropdown_value + ',';\n  return code;\n};\n\n\n//OCEANS \n\n//OCEANIC FRONTIERS\nvar water=[[\"Antártico\",\"Antartic Ocean\"],[\"Mares Árabes\",\"Arabian Seas\"],[\"Ártico\",\"Artic Ocean\"],[\"Atlántico\",\"Atlantic Ocean\"],[\"Mar Negro\",\"Black Sea\"],[\"Mares de Centro América\",\"Central American Seas\"],[\"Mares del Este Asiático\",\"East Asian Seas\"],[\"Índico\",\"Indian Ocean\"],[\"Mar Mediterráneo\",\"Mediterranean Sea\"],[\"Mares de Norte América\",\"North American Seas\"],[\"Mares del Norte de Europa\",\"North European Seas\"],[\"Pacífico\",\"Pacific Ocean\"]];\nBlockly.Extensions.register('big_water_dynamic_teacher',\n  function() {\n    this.getInput('INPUT')\n      .appendField(new Blockly.FieldDropdown(\n        function() {\n          var options = [];\n          var coincidence = [];\n          var searchVal = \"mediterráneo\";\n          var block = this.getSourceBlock();\n          for (var i=0 ; i < water.length ; i++)\n        {\n          options.push([water[i][0],water[i][1]]);\n        }\n          if (block){\n            searchVal = block.getFieldValue('input1');\n          }\n          for (var j=0 ; j < water.length ; j++)\n        {\n          if (water[j][0].toLowerCase().includes(searchVal.toLowerCase())){\n            coincidence.push([water[j][0],water[j][1]]);\n          }\n          if (coincidence.length > 0){\n             options = coincidence;\n          }\n        }\n          return options;\n        }\n      ), 'ocean'\n    );\n  }\n);\n\nBlockly.JavaScript['buscar_oceano'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'ocean=' + dropdown_value + ',';\n\n  return code;\n};\n\nvar mares=[[\"Mar Egeo\",\"Aegean Sea\"],[\"Mar de Alborán\",\"Alboran Sea\"],[\"Andam\",\"Andaman or Burma Sea\"],[\"Mar Arabe\",\"Arabian Sea\"],[\"Arafura mar\",\"Arafura Sea\"],[\"océano Ártico\",\"Arctic Ocean\"],[\"Bahía de BAFFIN\",\"Baffin Bay\"],[\"Baleares (Mar ibérico)\",\"Balearic (Iberian Sea)\"],[\"Mar Bali\",\"Bali Sea\"],[\"mar Báltico\",\"Baltic Sea\"],[\"Banda Sea\",\"Banda Sea\"],[\"Marentsz Mar\",\"Barentsz Sea\"],[\"Estrecho de bajo\",\"Bass Strait\"],[\"Bahía de Bengala\",\"Bay of Bengal\"],[\"Golfo de Vizcaya\",\"Bay of Biscay\"],[\"Bahía de Fundy\",\"Bay of Fundy\"],[\"Marufort\",\"Beaufort Sea\"],[\"Mar de Bering\",\"Bering Sea\"],[\"Bismarck Sea\",\"Bismarck Sea\"],[\"Mar Negro\",\"Black Sea\"],[\"Canal de bristol\",\"Bristol Channel\"],[\"Mar Caribe\",\"Caribbean Sea\"],[\"Celebes mar\",\"Celebes Sea\"],[\"mar Céltico\",\"Celtic Sea\"],[\"Mar de ceram\",\"Ceram Sea\"],[\"Mar Chukchi\",\"Chukchi Sea\"],[\"Coral Sea\",\"Coral Sea\"],[\"Estrecho de Davis\",\"Davis Strait\"],[\"Mar Siberiano Oriental\",\"East Siberian Sea\"],[\"Mar de China oriental\",\"Eastern China Sea\"],[\"canal inglés\",\"English Channel\"],[\"Flores Sea\",\"Flores Sea\"],[\"Gran bight australiano\",\"Great Australian Bight\"],[\"Mar de Groenlandia\",\"Greenland Sea\"],[\"Golfo de Aden\",\"Gulf of Aden\"],[\"Golfo de Alaska\",\"Gulf of Alaska\"],[\"Golfo de Aqaba\",\"Gulf of Aqaba\"],[\"Golfo de boni.\",\"Gulf of Boni\"],[\"Golfo de ambos\",\"Gulf of Bothnia\"],[\"Golfo de California\",\"Gulf of California\"],[\"Golfo de Finlandia\",\"Gulf of Finland\"],[\"Golfo de Guinea\",\"Gulf of Guinea\"],[\"Golfo de Guinea\",\"Gulf of Guinea\"],[\"Golfo de México\",\"Gulf of Mexico\"],[\"Golfo de Omán\",\"Gulf of Oman\"],[\"Golfo de Riga\",\"Gulf of Riga\"],[\"Golfo de St. Lawrence\",\"Gulf of St. Lawrence\"],[\"Golfo de Suez\",\"Gulf of Suez\"],[\"Golfo de Tailandia\",\"Gulf of Thailand\"],[\"Golfo de Tomini\",\"Gulf of Tomini\"],[\"Mar de halmahero\",\"Halmahera Sea\"],[\"Bahía Hudson\",\"Hudson Bay\"],[\"Estrecho de Hudson\",\"Hudson Strait\"],[\"océano Indio\",\"Indian Ocean\"],[\"Mas interiores de la costa oeste de Escocia\",\"Inner Seas off the West Coast of Scotland\"],[\"mar Jónico\",\"Ionian Sea\"],[\"Mar irlandés y canal de San Jorge\",\"Irish Sea and St. George's Channel\"],[\"Mar de Japón\",\"Japan Sea\"],[\"Java Sea\",\"Java Sea\"],[\"Mar Kara\",\"Kara Sea\"],[\"Kattegat\",\"Kattegat\"],[\"Labrador Sea\",\"Labrador Sea\"],[\"Laccadive Sea\",\"Laccadive Sea\"],[\"Mar de lapevo\",\"Laptev Sea\"],[\"Mar Liguria\",\"Ligurian Sea\"],[\"Lincoln mar\",\"Lincoln Sea\"],[\"Estrecho de Makassar\",\"Makassar Strait\"],[\"Estrecho de malacca\",\"Malacca Strait\"],[\"Mar Mediterráneo - Cuenca Oriental\",\"Mediterranean Sea - Eastern Basin\"],[\"Mar Mediterráneo - Cuenca occidental\",\"Mediterranean Sea - Western Basin\"],[\"Mar molecular\",\"Molukka Sea\"],[\"Canal de mozambique\",\"Mozambique Channel\"],[\"océano Atlántico Norte\",\"North Atlantic Ocean\"],[\"océano Pacífico Norte\",\"North Pacific Ocean\"],[\"mar del Norte\",\"North Sea\"],[\"Mar de Noruega\",\"Norwegian Sea\"],[\"Golfo pérsico\",\"Persian Gulf\"],[\"Mar filipino\",\"Philippine Sea\"],[\"Red Sea\",\"Red Sea\"],[\"Rio de La Plata\",\"Rio de La Plata\"],[\"Tu mar\",\"Savu Sea\"],[\"Mar de Azov\",\"Sea of Azov\"],[\"Mar de Mármara\",\"Sea of Marmara\"],[\"Mar de Okhotsk\",\"Sea of Okhotsk\"],[\"Ver o interior\",\"Seto Naikai or Inland Sea\"],[\"Skagerrak\",\"Skagerrak\"],[\"Solomon Mar\",\"Solomon Sea\"],[\"Océano Atlántico Sur\",\"South Atlantic Ocean\"],[\"mar del Sur de China\",\"South China Sea\"],[\"oceano Pacifico del Sur\",\"South Pacific Ocean\"],[\"Oceano del Sur\",\"Southern Ocean\"],[\"Estrecho de Gibraltar\",\"Strait of Gibraltar\"],[\"Mar del mar\",\"Sulu Sea\"],[\"Mar de Tasmania\",\"Tasman Sea\"],[\"Las aguas costeras del sureste de Alaska y la Columbia Británica.\",\"The Coastal Waters of Southeast Alaska and British Columbia\"],[\"Los pasajes noroeste\",\"The Northwestern Passages\"],[\"Timor Sea\",\"Timor Sea\"],[\"Mar Tirreno\",\"Tyrrhenian Sea\"],[\"mar Blanco\",\"White Sea\"],[\"Mar Amarillo\",\"Yellow Sea\"]]\nBlockly.Extensions.register('big_mares_dynamic_teacher',\n  function() {\n    this.getInput('INPUT')\n      .appendField(new Blockly.FieldDropdown(\n        function() {\n          var options = [];\n          var coincidence = [];\n          var searchVal = \"albo\";\n          var block = this.getSourceBlock();\n          for (var i=0 ; i < mares.length ; i++)\n        {\n          options.push([mares[i][0],mares[i][1]]);\n        }\n          if (block){\n            searchVal = block.getFieldValue('input1');\n          }\n          for (var j=0 ; j < mares.length ; j++)\n        {\n          if (mares[j][0].toLowerCase().includes(searchVal.toLowerCase())){\n            coincidence.push([mares[j][0],mares[j][1]]);\n          }\n          if (coincidence.length > 0){\n             options = coincidence;\n          }\n        }\n          return options;\n        }\n      ), 'sea'\n    );\n  }\n);\n\nBlockly.JavaScript['buscar_seas'] = function(block) {\n  \n  var dropdown_value = block.getInput('INPUT').fieldRow[1].getValue();\n  var code = 'sea=' + dropdown_value + ',';\n\n  return code;\n};\n\n\n\n//Vegetación \nBlockly.JavaScript['layer_tree'] = function(block) {\n  var code = 'layer=TREE,';\n  return code;\n};\nBlockly.JavaScript['layer_ndvi'] = function(block) {\n  var code = 'layer=NDVI,';\n  return code;\n};\nBlockly.JavaScript['layer_fires'] = function(block) {\n  var code = 'layer=FIRE,';\n  return code;\n};\nBlockly.JavaScript['layer_tree_loss'] = function(block) {\n  var code = 'layer=TREE_LOSS,';\n  return code;\n};\nBlockly.JavaScript['layer_gcvi'] = function(block) {\n  var code = 'layer=GCVI,';\n  return code;\n};\n\n//Suelo\nBlockly.JavaScript['layer_ndmi'] = function(block) {\n  var code = 'layer=NDMI,';\n  return code;\n};\nBlockly.JavaScript['layer_alt'] = function(block) {\n  var code = 'layer=ALT,';\n  return code;\n};\nBlockly.JavaScript['layer_cover'] = function(block) {\n  var code = 'layer=COVER,';\n  return code;\n};\nBlockly.JavaScript['layer_landforms'] = function(block) {\n  var code = 'layer=LANDFORMS,';\n  return code;\n};\n\n//Atmósfera\nBlockly.JavaScript['layer_tot_prep'] = function(block) {\n  var code = 'layer=TOT_PREP,';\n  return code;\n};\nBlockly.JavaScript['layer_cloud'] = function(block) {\n  var code = 'layer=CLOUDS,';\n  return code;\n};\nBlockly.JavaScript['layer_surf_press'] = function(block) {\n  var code = 'layer=SURF_PRESS,';\n  return code;\n};\nBlockly.JavaScript['layer_dewp_temp'] = function(block) {\n  var code = 'layer=DEWP_TEMP,';\n  return code;\n};\nBlockly.JavaScript['layer_air_temp'] = function(block) {\n  var code = 'layer=AIR_TEMP,';\n  return code;\n};\nBlockly.JavaScript['layer_10m_wind'] = function(block) {\n  var code = 'layer=10M_WIND,';\n  return code;\n};\n\n\n\n//Agua\nBlockly.JavaScript['layer_ndwi'] = function(block) {\n  var code = 'layer=NDWI,';\n  return code;\n};\nBlockly.JavaScript['layer_sea_press'] = function(block) {\n  var code = 'layer=SEA_PRESS,';\n  return code;\n};\nBlockly.JavaScript['layer_sea_temp'] = function(block) {\n  var code = 'layer=SEA_TEMP,';\n  return code;\n};\nBlockly.JavaScript['layer_river'] = function(block) {\n  var code = 'layer=RIVER,';\n  return code;\n};\n\n\n//Gases\nBlockly.JavaScript['layer_aer_ai'] = function(block) {\n  var code = 'layer=AER_AI,';\n  return code;\n};\nBlockly.JavaScript['layer_so2'] = function(block) {\n  var code = 'layer=SO2,';\n  return code;\n};\nBlockly.JavaScript['layer_no2'] = function(block) {\n  var code = 'layer=NO2,';\n  return code;\n};\nBlockly.JavaScript['layer_hcho'] = function(block) {\n  var code = 'layer=HCHO,';\n  return code;\n};\nBlockly.JavaScript['layer_ch4'] = function(block) {\n  var code = 'layer=CH4,';\n  return code;\n};\nBlockly.JavaScript['layer_co'] = function(block) {\n  var code = 'layer=CO,';\n  return code;\n};\nBlockly.JavaScript['layer_o3'] = function(block) {\n  var code = 'layer=O3,';\n  return code;\n};\n\n\n//Civilización\nBlockly.JavaScript['layer_den'] = function(block) {\n  var code = 'layer=DEN,';\n  return code;\n};\nBlockly.JavaScript['layer_light'] = function(block) {\n  var code = 'layer=LIGHT,';\n  return code;\n};\nBlockly.JavaScript['layer_human'] = function(block) {\n  var code = 'layer=HUMAN,';\n  return code;\n};\n\n\n//Special\nBlockly.JavaScript['transparency_level'] = function(block) {\n  var value = block.getFieldValue('transparency');\n  var code = 'layer_opacity=' + value + ',';\n  return code;\n};","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Mapa libre</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"showDualBlockly()\\\" color=\\\"primary\\\">\\n        <ion-icon name=\\\"copy-outline\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>    \\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <app-blck-t *ngIf=\\\"singleBlockly\\\"></app-blck-t>\\n    <app-blck-dual-t *ngIf=\\\"dualBlockly\\\"></app-blck-dual-t>\\n </ion-content>\\n\";","export default \"ion-content {\\n  --background: url(\\\"https://globalenergyprize.org/en/wp-content/uploads/2020/09/3296e5dad944d313478fc911c85c192e61eb-1.jpg\\\")0 0/100% 100% no-repeat;\\n}\\n\\n#primaryDiv {\\n  position: absolute;\\n  height: 50%;\\n  width: 50%;\\n  top: 0%;\\n}\\n\\n#secondaryDiv {\\n  position: absolute;\\n  right: 0px;\\n  height: 50%;\\n  width: 50%;\\n  top: 50%;\\n  right: 50%;\\n}\\n\\n#gee_map {\\n  position: absolute;\\n  height: 50%;\\n  width: 50%;\\n  right: 0%;\\n  bottom: 50%;\\n}\\n\\n#gee_map2 {\\n  position: absolute;\\n  height: 50%;\\n  width: 50%;\\n  bottom: 0%;\\n  right: 0%;\\n}\\n\\n#stepButton {\\n  position: fixed;\\n  bottom: 85%;\\n  right: 50%;\\n  left: 45%;\\n}\\n\\n#stepButton2 {\\n  position: fixed;\\n  bottom: 40%;\\n  right: 50%;\\n  left: 45%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2JsY2stZHVhbC10LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0pBQUE7QUFDSjs7QUFDQTtFQUNJLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFVBQUE7RUFDQSxPQUFBO0FBRUo7O0FBQUE7RUFDSSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxXQUFBO0VBQ0EsVUFBQTtFQUNBLFFBQUE7RUFDQSxVQUFBO0FBR0o7O0FBREE7RUFDSSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxVQUFBO0VBQ0EsU0FBQTtFQUNBLFdBQUE7QUFJSjs7QUFGQTtFQUNJLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFVBQUE7RUFDQSxVQUFBO0VBQ0EsU0FBQTtBQUtKOztBQUhBO0VBQ0ksZUFBQTtFQUNBLFdBQUE7RUFDQSxVQUFBO0VBQ0EsU0FBQTtBQU1KOztBQUpBO0VBQ0ksZUFBQTtFQUNBLFdBQUE7RUFDQSxVQUFBO0VBQ0EsU0FBQTtBQU9KIiwiZmlsZSI6ImJsY2stZHVhbC10LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNvbnRlbnR7XG4gICAgLS1iYWNrZ3JvdW5kOiB1cmwoJ2h0dHBzOi8vZ2xvYmFsZW5lcmd5cHJpemUub3JnL2VuL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA5LzMyOTZlNWRhZDk0NGQzMTM0NzhmYzkxMWM4NWMxOTJlNjFlYi0xLmpwZycpMCAwLzEwMCUgMTAwJSBuby1yZXBlYXQ7XG59XG4jcHJpbWFyeURpdiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGhlaWdodDogNTAlO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgdG9wOiAwJTtcbn1cbiNzZWNvbmRhcnlEaXYge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMHB4O1xuICAgIGhlaWdodDogNTAlO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgdG9wOjUwJTtcbiAgICByaWdodDogNTAlO1xufVxuI2dlZV9tYXAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBoZWlnaHQ6IDUwJTtcbiAgICB3aWR0aDogNTAlO1xuICAgIHJpZ2h0OjAlO1xuICAgIGJvdHRvbTogNTAlO1xufVxuI2dlZV9tYXAyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgaGVpZ2h0OiA1MCU7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBib3R0b206IDAlO1xuICAgIHJpZ2h0OjAlO1xufVxuI3N0ZXBCdXR0b24ge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICBib3R0b206IDg1JTtcbiAgICByaWdodDogNTAlO1xuICAgIGxlZnQ6IDQ1JTtcbn1cbiNzdGVwQnV0dG9uMiB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIGJvdHRvbTogNDAlO1xuICAgIHJpZ2h0OiA1MCU7XG4gICAgbGVmdDogNDUlO1xufVxuIl19 */\";","import {  Component, OnInit  } from '@angular/core';\nimport * as Blockly from 'blockly/core';\nimport 'src/app/members/teacher/Components/blck-t /blockeado-t.js';\nimport 'node_modules/blockly/blockly_compressed.js';\nimport \"node_modules/blockly/javascript_compressed.js\";\nimport { DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport { TMapService } from 'src/app/members/teacher/Services/t-map.service';\nimport { LoadingService } from 'src/app/services/loading/loading.service';\nimport 'src/app/members/teacher/Components/blck-dual-t/blockeado-t-dual .js';\n@Component({\n  selector: 'app-blck-dual-t',\n  templateUrl: './blck-dual-t.component.html',\n  styleUrls: ['./blck-dual-t.component.scss']\n})\n\nexport class BlckDualTeacherComponent implements OnInit {\n  primaryWorkspace: Blockly.WorkspaceSvg;\n  primaryWorkspace2: Blockly.WorkspaceSvg;\n\n  GEE = \"PCFET0NUWVBFIGh0bWw+Cgo8aGVhZD4KPG1ldGEgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04IiBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiLz4KPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVM9ZmFsc2U7IExfTk9fVE9VQ0g9ZmFsc2U7IExfRElTQUJMRV8zRD1mYWxzZTs8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vbGVhZmxldEAxLjQuMC9kaXN0L2xlYWZsZXQuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTEuMTIuNC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5qcyI+PC9zY3JpcHQ+CjxsaW5rIGhyZWY9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vbGVhZmxldEAxLjQuMC9kaXN0L2xlYWZsZXQuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9mb250LWF3ZXNvbWUvNC42LjMvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9yYXdjZG4uZ2l0aGFjay5jb20vcHl0aG9uLXZpc3VhbGl6YXRpb24vZm9saXVtL21hc3Rlci9mb2xpdW0vdGVtcGxhdGVzL2xlYWZsZXQuYXdlc29tZS5yb3RhdGUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KPHN0eWxlPiNtYXAge3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO3JpZ2h0OjA7bGVmdDowO308L3N0eWxlPgo8bWV0YSBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsCiAgICAgICAgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vIiBuYW1lPSJ2aWV3cG9ydCIvPgo8c3R5bGU+I21hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCB7CiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgIHdpZHRoOiAxMDAuMCU7CiAgICAgICAgaGVpZ2h0OiAxMDAuMCU7CiAgICAgICAgbGVmdDogMC4wJTsKICAgICAgICB0b3A6IDAuMCU7CiAgICAgICAgfQogICAgPC9zdHlsZT4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xlYWZsZXQuZnVsbHNjcmVlbi8xLjQuMi9Db250cm9sLkZ1bGxTY3JlZW4ubWluLmpzIj48L3NjcmlwdD4KPGxpbmsgaHJlZj0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbGVhZmxldC5mdWxsc2NyZWVuLzEuNC4yL0NvbnRyb2wuRnVsbFNjcmVlbi5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiLz4KPC9oZWFkPgo8Ym9keT4KPGRpdiBjbGFzcz0iZm9saXVtLW1hcCIgaWQ9Im1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCI+PC9kaXY+CjwvYm9keT4KPHNjcmlwdD4gICAgCiAgICAKICAgIAogICAgICAgIHZhciBib3VuZHMgPSBudWxsOwogICAgCgogICAgdmFyIG1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCA9IEwubWFwKAogICAgICAgICdtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQnLCB7CiAgICAgICAgY2VudGVyOiBbNDAuMTkyODAyODMyNDg5ODMsIC0zLjcwMjE0Mzc3MDA1MDcwMl0sCiAgICAgICAgem9vbTogNiwKICAgICAgICBtYXhCb3VuZHM6IGJvdW5kcywKICAgICAgICBsYXllcnM6IFtdLAogICAgICAgIHdvcmxkQ29weUp1bXA6IGZhbHNlLAogICAgICAgIGNyczogTC5DUlMuRVBTRzM4NTcsCiAgICAgICAgem9vbUNvbnRyb2w6IHRydWUsCiAgICAgICAgfSk7CkwuY29udHJvbC5zY2FsZSgpLmFkZFRvKG1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCk7CgogICAgCiAgICB2YXIgdGlsZV9sYXllcl8zZmJkZWJmYzU5YmY0NmNjYTg5NjgwYmQzN2Q1Y2U1ZiA9IEwudGlsZUxheWVyKAogICAgICAgICdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsCiAgICAgICAgewogICAgICAgICJhdHRyaWJ1dGlvbiI6IG51bGwsCiAgICAgICAgImRldGVjdFJldGluYSI6IGZhbHNlLAogICAgICAgICJtYXhOYXRpdmVab29tIjogMTgsCiAgICAgICAgIm1heFpvb20iOiAxOCwKICAgICAgICAibWluWm9vbSI6IDAsCiAgICAgICAgIm5vV3JhcCI6IGZhbHNlLAogICAgICAgICJvcGFjaXR5IjogMSwKICAgICAgICAic3ViZG9tYWlucyI6ICJhYmMiLAogICAgICAgICJ0bXMiOiBmYWxzZQp9KS5hZGRUbyhtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQpOwogICAgdmFyIHRpbGVfbGF5ZXJfNjcyOTcwZjU1OWZkNDcyZDk1OTBhNjk5MzdlMzI4YzggPSBMLnRpbGVMYXllcigKICAgICAgICAnaHR0cHM6Ly9tdDEuZ29vZ2xlLmNvbS92dC9seXJzPW0meD17eH0meT17eX0mej17en0nLAogICAgICAgIHsKICAgICAgICAiYXR0cmlidXRpb24iOiAiR29vZ2xlIiwKICAgICAgICAiZGV0ZWN0UmV0aW5hIjogZmFsc2UsCiAgICAgICAgIm1heE5hdGl2ZVpvb20iOiAxOCwKICAgICAgICAibWF4Wm9vbSI6IDE4LAogICAgICAgICJtaW5ab29tIjogMCwKICAgICAgICAibm9XcmFwIjogZmFsc2UsCiAgICAgICAgIm9wYWNpdHkiOiAxLAogICAgICAgICJzdWJkb21haW5zIjogImFiYyIsCiAgICAgICAgInRtcyI6IGZhbHNlCn0pLmFkZFRvKG1hcF8yM2UzZDg3OTQ0YmQ0NmQyYTcxZmU3NDgwOTI0YzExNCk7CiAgICB2YXIgdGlsZV9sYXllcl8wNDFlMDI2NzM2YmY0MjE1YTg5NjRiYWNhZWY0OGQ3MCA9IEwudGlsZUxheWVyKAogICAgICAgICdodHRwczovL210MS5nb29nbGUuY29tL3Z0L2x5cnM9cyZ4PXt4fSZ5PXt5fSZ6PXt6fScsCiAgICAgICAgewogICAgICAgICJhdHRyaWJ1dGlvbiI6ICJHb29nbGUiLAogICAgICAgICJkZXRlY3RSZXRpbmEiOiBmYWxzZSwKICAgICAgICAibWF4TmF0aXZlWm9vbSI6IDE4LAogICAgICAgICJtYXhab29tIjogMTgsCiAgICAgICAgIm1pblpvb20iOiAwLAogICAgICAgICJub1dyYXAiOiBmYWxzZSwKICAgICAgICAib3BhY2l0eSI6IDEsCiAgICAgICAgInN1YmRvbWFpbnMiOiAiYWJjIiwKICAgICAgICAidG1zIjogZmFsc2UKfSkuYWRkVG8obWFwXzIzZTNkODc5NDRiZDQ2ZDJhNzFmZTc0ODA5MjRjMTE0KTsKICAgIAogICAgICAgICAgICBMLmNvbnRyb2wuZnVsbHNjcmVlbih7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcGxlZnQnLAogICAgICAgICAgICAgICAgdGl0bGU6ICdGdWxsIFNjcmVlbicsCiAgICAgICAgICAgICAgICB0aXRsZUNhbmNlbDogJ0V4aXQgRnVsbCBTY3JlZW4nLAogICAgICAgICAgICAgICAgZm9yY2VTZXBhcmF0ZUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQpOwogICAgICAgICAgICBtYXBfMjNlM2Q4Nzk0NGJkNDZkMmE3MWZlNzQ4MDkyNGMxMTQub24oJ2VudGVyRnVsbHNjcmVlbicsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZW50ZXJlZCBmdWxsc2NyZWVuJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgbGF5ZXJfY29udHJvbF82M2Q5ZTQ4YWEzZTA0MjA4OGZlYjg2YzIzNmZhODg1NyA9IHsKICAgICAgICAgICAgICAgIGJhc2VfbGF5ZXJzIDogeyAib3BlbnN0cmVldG1hcCIgOiB0aWxlX2xheWVyXzNmYmRlYmZjNTliZjQ2Y2NhODk2ODBiZDM3ZDVjZTVmLCB9LAogICAgICAgICAgICAgICAgb3ZlcmxheXMgOiB7ICJHb29nbGUgTWFwcyIgOiB0aWxlX2xheWVyXzY3Mjk3MGY1NTlmZDQ3MmQ5NTkwYTY5OTM3ZTMyOGM4LCJHb29nbGUgU2F0ZWxsaXRlIiA6IHRpbGVfbGF5ZXJfMDQxZTAyNjczNmJmNDIxNWE4OTY0YmFjYWVmNDhkNzAsIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIEwuY29udHJvbC5sYXllcnMoCiAgICAgICAgICAgICAgICBsYXllcl9jb250cm9sXzYzZDllNDhhYTNlMDQyMDg4ZmViODZjMjM2ZmE4ODU3LmJhc2VfbGF5ZXJzLAogICAgICAgICAgICAgICAgbGF5ZXJfY29udHJvbF82M2Q5ZTQ4YWEzZTA0MjA4OGZlYjg2YzIzNmZhODg1Ny5vdmVybGF5cywKICAgICAgICAgICAgICAgIHtwb3NpdGlvbjogJ3RvcHJpZ2h0JywKICAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgYXV0b1pJbmRleDogdHJ1ZQogICAgICAgICAgICAgICAgfSkuYWRkVG8obWFwXzIzZTNkODc5NDRiZDQ2ZDJhNzFmZTc0ODA5MjRjMTE0KTsKICAgICAgICAgICAgCiAgICAgICAgCjwvc2NyaXB0Pg==\";\n  \n  public geeMap: SafeResourceUrl;\n  public geeMap2: SafeResourceUrl;\n  \n  constructor( public sanitizer: DomSanitizer, private mapService: TMapService,private loading:LoadingService) {}\n\n  ngOnInit() {\n    this.primaryWorkspace = Blockly.inject('primaryDiv',{\n      readOnly: false,\n      move: {\n        scrollbars: false,\n        //drag: true,\n        //wheel: true\n      },\n      //zoom:{\n        //controls: true,\n        //wheel: true,\n        //startScale: 1.0,\n        //maxScale: 3,\n        //minScale: 0.3,\n        //scaleSpeed: 1.2,\n        //pinch: true\n      //},\n\t    collapse : true, \n      renderer: 'thrasos',\n\t    comments : true, \n\t    disable : true, \n\t    maxBlocks : 10, \n\t    trashcan : true, \n\t    horizontalLayout : false, \n\t    toolboxPosition : 'start', \n\t    scss : true, \n\t    media : 'https://unpkg.com/blockly/media/', \n\t    rtl : false, \n\t    sounds : true, \n\t    oneBasedIndex : true,\n      toolbox: `\n      <xml xmlns=\"https://developers.google.com/blockly/xml\" id=\"toolbox\" style=\"display: none\">\n  <category name=\"Lugares\" colour=\"#5ba58c\">\n    <category name=\"Territorios\" colour=\"#5ba58c\">\n      <block type=\"buscar_pais\">\n        <field name=\"input1\">Escribe el país</field>\n        <field name=\"INPUT\">paises</field>\n      </block>\n      <block type=\"buscar_regiones\">\n        <field name=\"input1\">Escribe la región</field>\n        <field name=\"INPUT\">regiones</field>\n      </block>\n      <block type=\"buscar_provincia\">\n        <field name=\"input1\">Escribe la provincia</field>\n        <field name=\"INPUT\">provincias</field>\n      </block>\n    </category>\n    <category name=\"Mares y océanos \" colour=\"#F6EFA6\">\n      <block type=\"buscar_oceano\">\n        <field name=\"input1\">Regiones grandes</field>\n        <field name=\"INPUT\">agua</field>\n      </block>\n      <block type=\"buscar_seas\">\n        <field name=\"input1\">Regiones pequeñas</field>\n        <field name=\"INPUT\">agua</field>\n      </block>\n    </category>\n  </category>\n  <category name=\"Vegetación\" colour=\"#0DF013\">\n    <block type=\"layer_tree\">\n    <field name=\"TREE\">Árboles</field>\n    </block>\n    <block type=\"layer_ndvi\">\n    <field name=\"NDVI\">Cantidad de vegetación</field>\n    </block>\n    <block type=\"layer_fires\">\n    <field name=\"FIRES\">incendios</field>\n    </block>\n    <block type=\"layer_tree_loss\">\n    <field name=\"TREE_LOSS\">Pérdida de árboles</field>\n    </block>\n    <block type=\"layer_gcvi\">\n    <field name=\"GCVI\">Salud de Vegetación</field>\n    </block>\n  </category>\n  <category name=\"Suelo\" colour=\"#D25F00\">\n    <block type=\"layer_ndmi\">\n    <field name=\"NDMI\">Humedad del suelo</field>\n    </block>\n    <block type=\"layer_alt\">\n    <field name=\"ALT\">Relieve</field>\n    </block>\n    <block type=\"layer_cover\">\n    <field name=\"COVER\">Tipo de suelo</field>\n    </block>\n    <block type=\"layer_landforms\">\n    <field name=\"LANDFORMS\">Tipos de relieve</field>\n    </block>\n  </category>\n  <category name=\"Atmósfera\" colour=\"#ACF5E3\">\n    <block type=\"layer_tot_prep\">\n    <field name=\"TOT_PREP\">Lluvias</field>\n    </block>\n    <block type=\"layer_cloud\">\n    <field name=\"CLOUD\">Nubes</field>\n    </block>\n    <block type=\"layer_surf_press\">\n    <field name=\"SURF_PRESS\">Presión atmosférica</field>\n    </block>\n    <block type=\"layer_dewp_temp\">\n    <field name=\"DEWP_TEMP\">Temperatura de formación de niebla</field>\n    </block>\n    <block type=\"layer_air_temp\">\n    <field name=\"AIR_TEMP\">Temperatura del aire</field>\n    </block>\n    <block type=\"layer_10m_wind\">\n    <field name=\"10M_WIND\">Viento</field>\n    </block>\n  </category>\n  <category name=\"Agua\" colour=\"#00A6FB\">\n    <block type=\"layer_ndwi\">\n    <field name=\"NDWI\">Lagos</field>\n    </block>\n    <block type=\"layer_sea_press\">\n    <field name=\"SEA_PRESS\">Presión a nivel del mar</field>\n    </block>\n    <block type=\"layer_sea_temp\">\n    <field name=\"SEA_TEMP\">Temperatura del agua</field>\n    </block>\n    <block type=\"layer_river\">\n    <field name=\"RIVER\">Ríos</field>\n    </block>\n  </category>\n  <category name=\"Gases\" colour=\"#FFF671\">\n    <block type=\"layer_aer_ai\">\n    <field name=\"AER_AI\">Aerosoles</field>\n    </block>\n    <block type=\"layer_so2\">\n    <field name=\"SO2\">Dióxido de azufre</field>\n    </block>\n    <block type=\"layer_no2\">\n    <field name=\"NO2\">Dióxido de nitrógeno</field>\n    </block>\n    <block type=\"layer_hcho\">\n    <field name=\"HCHO\">Metanal</field>\n    </block>\n    <block type=\"layer_ch4\">\n    <field name=\"CH4\">Metano</field>\n    </block>\n    <block type=\"layer_co\">\n    <field name=\"CO\">Monóxido de carbono</field>\n    </block>\n    <block type=\"layer_o3\">\n    <field name=\"O3\">Ozono</field>\n    </block>\n  </category>\n  <category name=\"Civilización\" colour=\"#B5B5B5\">\n    <block type=\"layer_den\">\n    <field name=\"DEN\">Densidad de población</field>\n    </block>\n    <block type=\"layer_light\">\n    <field name=\"LIGHT\">Luces nocturnas</field>\n    </block>\n    <block type=\"layer_human\">\n    <field name=\"HUMAN\">Modificado por el humano</field>\n    </block>\n  </category>\n  <sep></sep>\n  <category name=\"Especiales\" colour=\"#FF7AE2\">\n    <block type=\"transparency_level\">\n    <field name=\"transparency\"></field>\n    </block>\n    </category>\n</xml>\n      `\n    } as Blockly.BlocklyOptions);\n    \n    this.primaryWorkspace2 = Blockly.inject('secondaryDiv',{\n      readOnly: false,\n      move: {\n        scrollbars: false,\n        //drag: true,\n        //wheel: true\n      },\n      //zoom:{\n        //controls: true,\n        //wheel: true,\n        //startScale: 1.0,\n        //maxScale: 3,\n        //minScale: 0.3,\n        //scaleSpeed: 1.2,\n        //pinch: true\n      //},\n\t    collapse : true, \n      renderer: 'thrasos',\n\t    comments : true, \n\t    disable : true, \n\t    maxBlocks : 10, \n\t    trashcan : true, \n\t    horizontalLayout : false, \n\t    toolboxPosition : 'start', \n\t    scss : true, \n\t    media : 'https://unpkg.com/blockly/media/', \n\t    rtl : false, \n\t    sounds : true, \n\t    oneBasedIndex : true,\n      toolbox: `\n      <xml xmlns=\"https://developers.google.com/blockly/xml\" id=\"toolbox\" style=\"display: none\">\n  <category name=\"Lugares\" colour=\"#5ba58c\">\n    <category name=\"Territorios\" colour=\"#5ba58c\">\n      <block type=\"look_country_dual\">\n        <field name=\"input1\">Escribe el país</field>\n        <field name=\"INPUT\">paises</field>\n      </block>\n      <block type=\"look_regions\">\n        <field name=\"input1\">Escribe la región</field>\n        <field name=\"INPUT\">regiones</field>\n      </block>\n      <block type=\"look_province\">\n        <field name=\"input1\">Escribe la provincia</field>\n        <field name=\"INPUT\">provincias</field>\n      </block>\n    </category>\n    <category name=\"Mares y océanos \" colour=\"#F6EFA6\">\n      <block type=\"look_oceans_dual\">\n        <field name=\"input1\">Regiones grandes</field>\n        <field name=\"INPUT\">agua</field>\n      </block>\n      <block type=\"look_seas_dual\">\n        <field name=\"input1\">Regiones pequeñas</field>\n        <field name=\"INPUT\">agua</field>\n      </block>\n    </category>\n  </category>\n  <category name=\"Vegetación\" colour=\"#0DF013\">\n    <block type=\"layer_tree\">\n    <field name=\"TREE\">Árboles</field>\n    </block>\n    <block type=\"layer_ndvi\">\n    <field name=\"NDVI\">Cantidad de vegetación</field>\n    </block>\n    <block type=\"layer_fires\">\n    <field name=\"FIRES\">incendios</field>\n    </block>\n    <block type=\"layer_tree_loss\">\n    <field name=\"TREE_LOSS\">Pérdida de árboles</field>\n    </block>\n    <block type=\"layer_gcvi\">\n    <field name=\"GCVI\">Salud de Vegetación</field>\n    </block>\n  </category>\n  <category name=\"Suelo\" colour=\"#D25F00\">\n    <block type=\"layer_ndmi\">\n    <field name=\"NDMI\">Humedad del suelo</field>\n    </block>\n    <block type=\"layer_alt\">\n    <field name=\"ALT\">Relieve</field>\n    </block>\n    <block type=\"layer_cover\">\n    <field name=\"COVER\">Tipo de suelo</field>\n    </block>\n    <block type=\"layer_landforms\">\n    <field name=\"LANDFORMS\">Tipos de relieve</field>\n    </block>\n  </category>\n  <category name=\"Atmósfera\" colour=\"#ACF5E3\">\n    <block type=\"layer_tot_prep\">\n    <field name=\"TOT_PREP\">Lluvias</field>\n    </block>\n    <block type=\"layer_cloud\">\n    <field name=\"CLOUD\">Nubes</field>\n    </block>\n    <block type=\"layer_surf_press\">\n    <field name=\"SURF_PRESS\">Presión atmosférica</field>\n    </block>\n    <block type=\"layer_dewp_temp\">\n    <field name=\"DEWP_TEMP\">Temperatura de formación de niebla</field>\n    </block>\n    <block type=\"layer_air_temp\">\n    <field name=\"AIR_TEMP\">Temperatura del aire</field>\n    </block>\n    <block type=\"layer_10m_wind\">\n    <field name=\"10M_WIND\">Viento</field>\n    </block>\n  </category>\n  <category name=\"Agua\" colour=\"#00A6FB\">\n    <block type=\"layer_ndwi\">\n    <field name=\"NDWI\">Lagos</field>\n    </block>\n    <block type=\"layer_sea_press\">\n    <field name=\"SEA_PRESS\">Presión a nivel del mar</field>\n    </block>\n    <block type=\"layer_sea_temp\">\n    <field name=\"SEA_TEMP\">Temperatura del agua</field>\n    </block>\n    <block type=\"layer_river\">\n    <field name=\"RIVER\">Ríos</field>\n    </block>\n  </category>\n  <category name=\"Gases\" colour=\"#FFF671\">\n    <block type=\"layer_aer_ai\">\n    <field name=\"AER_AI\">Aerosoles</field>\n    </block>\n    <block type=\"layer_so2\">\n    <field name=\"SO2\">Dióxido de azufre</field>\n    </block>\n    <block type=\"layer_no2\">\n    <field name=\"NO2\">Dióxido de nitrógeno</field>\n    </block>\n    <block type=\"layer_hcho\">\n    <field name=\"HCHO\">Metanal</field>\n    </block>\n    <block type=\"layer_ch4\">\n    <field name=\"CH4\">Metano</field>\n    </block>\n    <block type=\"layer_co\">\n    <field name=\"CO\">Monóxido de carbono</field>\n    </block>\n    <block type=\"layer_o3\">\n    <field name=\"O3\">Ozono</field>\n    </block>\n  </category>\n  <category name=\"Civilización\" colour=\"#B5B5B5\">\n    <block type=\"layer_den\">\n    <field name=\"DEN\">Densidad de población</field>\n    </block>\n    <block type=\"layer_light\">\n    <field name=\"LIGHT\">Luces nocturnas</field>\n    </block>\n    <block type=\"layer_human\">\n    <field name=\"HUMAN\">Modificado por el humano</field>\n    </block>\n  </category>\n  <sep></sep>\n  <category name=\"Especiales\" colour=\"#FF7AE2\">\n    <block type=\"transparency_level\">\n    <field name=\"transparency\"></field>\n    </block>\n    </category>\n</xml>\n      `\n    } as Blockly.BlocklyOptions);\n\n    //Load the maps\n    this.geeMap = this.sanitizer.bypassSecurityTrustResourceUrl(`data:text/html;base64,${this.GEE}`);\n    this.geeMap2 = this.sanitizer.bypassSecurityTrustResourceUrl(`data:text/html;base64,${this.GEE}`);\n\n    //Add the change listener to the first workspace load the regions and provinces\n    this.primaryWorkspace.addChangeListener((primaryEvent)=> {\n      if (Blockly.Events.CHANGE === primaryEvent.type ||Blockly.Events.CREATE === primaryEvent.type)\n      {  \n        //Look for the code in the wotkspace\n        var code =(Blockly as any).JavaScript.workspaceToCode(this.primaryWorkspace)\n        //split it to differenciate from country, region and province\n        var split_code= code.split(',')\n        //create three differents variables with each option\n        var code_country= split_code[0]+',';\n        var code_region= split_code[1]+',';\n        var code_province= split_code[2]+',';\n        //Due to a stragne split creation. The last code to add is the first, we need to check wether if the codes are the one we want.\n        var regionTrue = code_region.startsWith(\"region=\");\n        var countryTrue = code_country.startsWith(\"country=\");\n        //when code_country references to a region.\n        var falseCountry = code_country.startsWith(\"region=\");\n\n        //console.log evertything. Onces we fixed the problem it was commented\n        //console.log('country: '+code_country)\n        //console.log(falseCountry)\n        //console.log('region: '+code_region)\n        //console.log(regionTrue)\n        //console.log('province: '+code_province)\n        \n        //If country_code is a country, use it for the regions.\n        if(countryTrue ==true){\n          this.mapService.getRegion(code_country)\n              .subscribe(block =>{\n            var listReg=block\n            console.log(\"Regiones-->\",listReg)\n            localStorage.setItem('listRegTeach', listReg);\n            }\n          )\n          this.mapService.getLatinRegion(code_country)\n              .subscribe(block =>{\n            var listLatinReg=block\n            console.log(\"Regiones Latín-->\",listLatinReg)\n            localStorage.setItem('listLatinRegTeach', listLatinReg);\n            }\n          )\n        }\n        //If region_code is a region, look for the provinces.\n        if (regionTrue==true){\n          this.mapService.getProvince(code_region)\n              .subscribe(block =>{\n            var listProv=block\n            console.log(\"Provincias-->\",listProv)\n            localStorage.setItem('listProvTeach', listProv);\n            }\n          )\n          this.mapService.getLatinProvince(code_region)\n              .subscribe(block =>{\n            var listLatinProv=block\n            console.log(\"Provincias Latín-->\",listLatinProv)\n            localStorage.setItem('listLatinProvTeach', listLatinProv);\n            }\n          )\n        }\n        //Teh last option that happens is that country_code is a region. If that happens, use it for provinces.\n        if(falseCountry==true) {\n          this.mapService.getProvince(code_country)\n              .subscribe(block =>{\n            var listProv=block\n            console.log(\"Provincias-->\",listProv)\n            localStorage.setItem('listProvTeach', listProv);\n            }\n          )\n          this.mapService.getLatinProvince(code_country)\n              .subscribe(block =>{\n            var listLatinProv=block\n            console.log(\"Provincias Latín-->\",listLatinProv)\n            localStorage.setItem('listLatinProvTeach', listLatinProv);\n            }\n          )\n        }\n      }\n      \n    }\n    ) \n    //Disable the blocks that are not joined with the main block in the first workspace\n    this.primaryWorkspace.addChangeListener(Blockly.Events.disableOrphans);\n\n    //Add the change listener to the second workspace load the regions and provinces    \n    this.primaryWorkspace2.addChangeListener((primaryEvent)=> {\n      if (Blockly.Events.CHANGE === primaryEvent.type ||Blockly.Events.CREATE === primaryEvent.type)\n      {  \n        //Look for the code in the wotkspace\n        var code =(Blockly as any).JavaScript.workspaceToCode(this.primaryWorkspace2)\n        //split it to differenciate from country, region and province\n        var split_code= code.split(',')\n        //create three differents variables with each option\n        var code_country= split_code[0]+',';\n        var code_region= split_code[1]+',';\n        var code_province= split_code[2]+',';\n        //Due to a stragne split creation. The last code to add is the first, we need to check wether if the codes are the one we want.\n        var regionTrue = code_region.startsWith(\"region=\");\n        var countryTrue = code_country.startsWith(\"country=\");\n        //when code_country references to a region.\n        var falseCountry = code_country.startsWith(\"region=\");\n\n        //console.log evertything. Onces we fixed the problem it was commented\n        //console.log('country: '+code_country)\n        //console.log(falseCountry)\n        //console.log('region: '+code_region)\n        //console.log(regionTrue)\n        //console.log('province: '+code_province)\n        \n        //If country_code is a country, use it for the regions.\n        if(countryTrue ==true){\n          this.mapService.getRegion(code_country)\n              .subscribe(block =>{\n            var listReg=block\n            console.log(\"Regiones-->\",listReg)\n            localStorage.setItem('listRegTeachDual', listReg);\n            }\n          )\n          this.mapService.getLatinRegion(code_country)\n              .subscribe(block =>{\n            var listLatinReg=block\n            console.log(\"Regiones Latín-->\",listLatinReg)\n            localStorage.setItem('listLatinRegTeachDual', listLatinReg);\n            }\n          )\n        }\n        //If region_code is a region, look for the provinces.\n        if (regionTrue==true){\n          this.mapService.getProvince(code_region)\n              .subscribe(block =>{\n            var listProv=block\n            console.log(\"Provincias-->\",listProv)\n            localStorage.setItem('listProvTeachDual', listProv);\n            }\n          )\n          this.mapService.getLatinProvince(code_region)\n              .subscribe(block =>{\n            var listLatinProv=block\n            console.log(\"Provincias Latín-->\",listLatinProv)\n            localStorage.setItem('listLatinProvTeachDual', listLatinProv);\n            }\n          )\n        }\n        //Teh last option that happens is that country_code is a region. If that happens, use it for provinces.\n        if(falseCountry==true) {\n          this.mapService.getProvince(code_country)\n              .subscribe(block =>{\n            var listProv=block\n            console.log(\"Provincias-->\",listProv)\n            localStorage.setItem('listProvTeachDual', listProv);\n            }\n          )\n          this.mapService.getLatinProvince(code_country)\n              .subscribe(block =>{\n            var listLatinProv=block\n            console.log(\"Provincias Latín-->\",listLatinProv)\n            localStorage.setItem('listLatinProvTeachDual', listLatinProv);\n            }\n          )\n        }\n      }\n      \n    }\n    ) \n    //Disable the blocks that are not joined with the main block in the second workspace\n    this.primaryWorkspace2.addChangeListener(Blockly.Events.disableOrphans);\n  }\n\n  //Play button one \n  async  stepCode(){\n    //Run the map-loading function until it takes the map.\n    this.loading.mapLoading();\n    //Extract the code from the main blocks in the workspace by creating a root Block and asigning it the rest.\n    var rootBlock = null;\n    //Select the blocks that are in the top without sorting them.\n    var blocks = this.primaryWorkspace.getTopBlocks(false);\n    for (var i = 0, block; block = blocks[i]; i++) {\n      //Select which ones are going to be those main blocks\n    if (block.type == 'buscar_pais' || block.type == 'buscar_oceano' ||block.type == 'buscar_seas') {\n      rootBlock = block;\n      }\n    }\n    //Take the code from the rootBlocks. The ones that are connected.\n    var code = (Blockly as any).JavaScript.blockToCode(rootBlock);\n     //Calls the server with all the necessary parameters in order\n     this.mapService.getMap(code)\n       .subscribe(map =>{\n         console.log(map)\n         this.geeMap = this.sanitizer.bypassSecurityTrustResourceUrl(`data:text/html;base64,${map}`);\n         //Finish map loading function\n         this.loading.dustyLoading.dismiss();\n         //Log the code from the blocks.\n         console.log(code);\n       },\n       _error => {\n         setTimeout(()=>{\n         //Finish map loading function\n         this.loading.dustyLoading.dismiss();\n         //Give an alert message \n         alert('Parece que Dusty no ha encontrado lo que estabas buscando...')\n         //Set finish time to 1 sec after the error has happend.\n       },1000)}\n     ); \n  }\n  //Play button two\n  async  stepCode2(){\n       //Run the map-loading function until it takes the map.\n       this.loading.mapLoading();\n       //Extract the code from the main blocks in the workspace by creating a root Block and asigning it the rest.\n       var rootBlock = null;\n       //Select the blocks that are in the top without sorting them.\n       var blocks = this.primaryWorkspace2.getTopBlocks(false);\n       for (var i = 0, block; block = blocks[i]; i++) {\n         //Select which ones are going to be those main blocks\n        if (block.type == 'look_country_dual' || block.type == 'look_oceans_dual' ||block.type == 'look_seas_dual') {\n          rootBlock = block;\n         }\n       }\n       //Take the code from the rootBlocks. The ones that are connected.\n       var code = (Blockly as any).JavaScript.blockToCode(rootBlock);\n    //Calls the server with all the necessary parameters in order\n    this.mapService.getMap(code)\n      .subscribe(map =>{\n        console.log(map)\n        this.geeMap2 = this.sanitizer.bypassSecurityTrustResourceUrl(`data:text/html;base64,${map}`);\n        //Finish map loading function\n        this.loading.dustyLoading.dismiss();\n        //Log the code from the blocks.\n        console.log(code);\n      },\n      _error => {\n        setTimeout(()=>{\n        //Finish map loading function\n        this.loading.dustyLoading.dismiss();\n        //Give an alert message \n        alert('Parece que Dusty no ha encontrado lo que estabas buscando...')\n        //Set finish time to 1 sec after the error has happend.\n      },1000)}\n    ); \n  }\n}","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { TSpacePageRoutingModule } from './t-space-routing.module';\nimport { TSpacePage } from './t-space.page';\nimport { BlckTComponent } from 'src/app/members/teacher/Components/blck-t /blck-t.component';\nimport { BlckDualTeacherComponent } from '../../Components/blck-dual-t/blck-dual-t.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TSpacePageRoutingModule\n  ],\n  declarations: [TSpacePage,BlckTComponent,BlckDualTeacherComponent],\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\n  exports: [BlckTComponent,BlckDualTeacherComponent]\n})\nexport class TSpacePageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0LXNwYWNlLnBhZ2Uuc2NzcyJ9 */\";","export default \"<ion-content>\\n  <table width=\\\"100%\\\">\\n    <tr>\\n      <td>\\n        <div id=\\\"primaryDiv\\\"></div>\\n      </td>\\n      <td>\\n        <iframe [src]=\\\"t_geeMap\\\" frameborder=\\\"0\\\" allowfullscreen id=\\\"t_gee_map\\\"></iframe>\\n      </td>\\n    </tr>\\n  </table>\\n    <p id=\\\"stepButton\\\">\\n     <ion-button (click)=\\\"stepCode()\\\" color=\\\"primary\\\">\\n       <ion-icon name = \\\"play-outline\\\"></ion-icon>\\n     </ion-button>\\n    </p>\\n  </ion-content>\\n\\n\";","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TMapService {\n  private api = \"https://khalil-app-306611.ew.r.appspot.com/KhalilApp\";\n  constructor(private http:HttpClient) { }\n  \n\n  getMap(code)\n  {\n    const path = `${this.api}/mapaDrawMock?code_query=${code}`;\n    return this.http.get(path\n      ,{responseType: 'text'}\n    ); \n  }\n  getRegion(code)\n  {\n    const path = `${this.api}/block_region_names?code_query=${code}`;\n    return this.http.get(path\n      ,{responseType: 'text'}\n    ); \n  }\n  getLatinRegion(code)\n  {\n    const path = `${this.api}/block_region_names_latin?code_query=${code}`;\n    return this.http.get(path\n      ,{responseType: 'text'}\n    ); \n  }  \n\n  getProvince(code)\n  {\n    const path = `${this.api}/block_province_names?code_query=${code}`;\n    return this.http.get(path\n      ,{responseType: 'text'}\n    ); \n  }\n  getLatinProvince(code)\n  {\n    const path = `${this.api}/block_province_names_latin?code_query=${code}`;\n    return this.http.get(path\n      ,{responseType: 'text'}\n    ); \n  } \n}","export default \"ion-content {\\n  --background: url(\\\"https://globalenergyprize.org/en/wp-content/uploads/2020/09/3296e5dad944d313478fc911c85c192e61eb-1.jpg\\\")0 0/100% 100% no-repeat;\\n}\\n\\n#primaryDiv {\\n  position: absolute;\\n  height: 100%;\\n  width: 50%;\\n}\\n\\n#t_gee_map {\\n  position: absolute;\\n  height: 100%;\\n  width: 50%;\\n}\\n\\n#stepButton {\\n  position: fixed;\\n  bottom: 85%;\\n  right: 50%;\\n  left: 45%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2JsY2stdCUyMC9ibGNrLXQuY29tcG9uZW50LnNjc3MiLCIuLi8uLi8uLi8uLi8uLi8uLi9ibGNrLXQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrSkFBQTtBQ0NKOztBRENBO0VBQ0ksa0JBQUE7RUFDQSxZQUFBO0VBQ0EsVUFBQTtBQ0VKOztBREFBO0VBQ0ksa0JBQUE7RUFDQSxZQUFBO0VBQ0EsVUFBQTtBQ0dKOztBRERBO0VBQ0ksZUFBQTtFQUNBLFdBQUE7RUFDQSxVQUFBO0VBQ0EsU0FBQTtBQ0lKIiwiZmlsZSI6ImJsY2stdC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jb250ZW50e1xuICAgIC0tYmFja2dyb3VuZDogdXJsKCdodHRwczovL2dsb2JhbGVuZXJneXByaXplLm9yZy9lbi93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wOS8zMjk2ZTVkYWQ5NDRkMzEzNDc4ZmM5MTFjODVjMTkyZTYxZWItMS5qcGcnKTAgMC8xMDAlIDEwMCUgbm8tcmVwZWF0O1xufVxuI3ByaW1hcnlEaXYge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDUwJTtcbn1cbiN0X2dlZV9tYXAge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDUwJTtcbn1cbiNzdGVwQnV0dG9uIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgYm90dG9tOiA4NSU7XG4gICAgcmlnaHQ6IDUwJTtcbiAgICBsZWZ0OiA0NSU7XG59IiwiaW9uLWNvbnRlbnQge1xuICAtLWJhY2tncm91bmQ6IHVybChcImh0dHBzOi8vZ2xvYmFsZW5lcmd5cHJpemUub3JnL2VuL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA5LzMyOTZlNWRhZDk0NGQzMTM0NzhmYzkxMWM4NWMxOTJlNjFlYi0xLmpwZ1wiKTAgMC8xMDAlIDEwMCUgbm8tcmVwZWF0O1xufVxuXG4jcHJpbWFyeURpdiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogNTAlO1xufVxuXG4jdF9nZWVfbWFwIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiA1MCU7XG59XG5cbiNzdGVwQnV0dG9uIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBib3R0b206IDg1JTtcbiAgcmlnaHQ6IDUwJTtcbiAgbGVmdDogNDUlO1xufSJdfQ== */\";"],"sourceRoot":"webpack:///"}